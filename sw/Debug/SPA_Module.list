
SPA_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004954  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004a60  08004a60  00005a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a84  08004a84  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004a84  08004a84  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a84  08004a84  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a88  08004a88  00005a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004a8c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000014  08004aa0  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08004aa0  000061dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2c6  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001947  00000000  00000000  00010303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00011c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d1  00000000  00000000  000127b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017832  00000000  00000000  00013081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8e4  00000000  00000000  0002a8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ae9d  00000000  00000000  00036197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1034  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f4c  00000000  00000000  000c1078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c3fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a48 	.word	0x08004a48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08004a48 	.word	0x08004a48

0800014c <HandleFrontRadarPulses>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HandleFrontRadarPulses(TIM_HandleTypeDef *htim)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	static 	int8_t 		index = RADAR_PULSES_NUMBER;
	static 	int8_t 		start_cpatured = 0;
	static 	uint32_t	captured_pulses = 0;
			uint32_t 	pulse = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	613b      	str	r3, [r7, #16]
			uint16_t 	packet = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	81fb      	strh	r3, [r7, #14]

	pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800015c:	2104      	movs	r1, #4
 800015e:	6878      	ldr	r0, [r7, #4]
 8000160:	f003 ff26 	bl	8003fb0 <HAL_TIM_ReadCapturedValue>
 8000164:	6138      	str	r0, [r7, #16]

	if (IS_START_PULSE(pulse))
 8000166:	693b      	ldr	r3, [r7, #16]
 8000168:	f240 726c 	movw	r2, #1900	@ 0x76c
 800016c:	4293      	cmp	r3, r2
 800016e:	d80b      	bhi.n	8000188 <HandleFrontRadarPulses+0x3c>
 8000170:	693b      	ldr	r3, [r7, #16]
 8000172:	f240 7243 	movw	r2, #1859	@ 0x743
 8000176:	4293      	cmp	r3, r2
 8000178:	d906      	bls.n	8000188 <HandleFrontRadarPulses+0x3c>
	{
		start_cpatured = 1;
 800017a:	4b2f      	ldr	r3, [pc, #188]	@ (8000238 <HandleFrontRadarPulses+0xec>)
 800017c:	2201      	movs	r2, #1
 800017e:	701a      	strb	r2, [r3, #0]
		index = RADAR_PULSES_NUMBER;
 8000180:	4b2e      	ldr	r3, [pc, #184]	@ (800023c <HandleFrontRadarPulses+0xf0>)
 8000182:	2220      	movs	r2, #32
 8000184:	701a      	strb	r2, [r3, #0]
		return;
 8000186:	e053      	b.n	8000230 <HandleFrontRadarPulses+0xe4>
	}
	if (start_cpatured){
 8000188:	4b2b      	ldr	r3, [pc, #172]	@ (8000238 <HandleFrontRadarPulses+0xec>)
 800018a:	f993 3000 	ldrsb.w	r3, [r3]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d04e      	beq.n	8000230 <HandleFrontRadarPulses+0xe4>
		if (IS_HIGH_PULSE(pulse)) captured_pulses |= (1 << index);
 8000192:	693b      	ldr	r3, [r7, #16]
 8000194:	2bdc      	cmp	r3, #220	@ 0xdc
 8000196:	d80e      	bhi.n	80001b6 <HandleFrontRadarPulses+0x6a>
 8000198:	693b      	ldr	r3, [r7, #16]
 800019a:	2bb3      	cmp	r3, #179	@ 0xb3
 800019c:	d90b      	bls.n	80001b6 <HandleFrontRadarPulses+0x6a>
 800019e:	4b27      	ldr	r3, [pc, #156]	@ (800023c <HandleFrontRadarPulses+0xf0>)
 80001a0:	f993 3000 	ldrsb.w	r3, [r3]
 80001a4:	461a      	mov	r2, r3
 80001a6:	2301      	movs	r3, #1
 80001a8:	4093      	lsls	r3, r2
 80001aa:	461a      	mov	r2, r3
 80001ac:	4b24      	ldr	r3, [pc, #144]	@ (8000240 <HandleFrontRadarPulses+0xf4>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4313      	orrs	r3, r2
 80001b2:	4a23      	ldr	r2, [pc, #140]	@ (8000240 <HandleFrontRadarPulses+0xf4>)
 80001b4:	6013      	str	r3, [r2, #0]

		if (index == 0) {
 80001b6:	4b21      	ldr	r3, [pc, #132]	@ (800023c <HandleFrontRadarPulses+0xf0>)
 80001b8:	f993 3000 	ldrsb.w	r3, [r3]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d12e      	bne.n	800021e <HandleFrontRadarPulses+0xd2>
			front_min_distance = 255;
 80001c0:	4b20      	ldr	r3, [pc, #128]	@ (8000244 <HandleFrontRadarPulses+0xf8>)
 80001c2:	22ff      	movs	r2, #255	@ 0xff
 80001c4:	801a      	strh	r2, [r3, #0]
			for (int i=0; i<4; i+=1) {
 80001c6:	2300      	movs	r3, #0
 80001c8:	617b      	str	r3, [r7, #20]
 80001ca:	e01f      	b.n	800020c <HandleFrontRadarPulses+0xc0>
				packet = (captured_pulses & (255 << (RADAR_PACKET_LENGTH * i))) >> (RADAR_PACKET_LENGTH * i);
 80001cc:	697b      	ldr	r3, [r7, #20]
 80001ce:	00db      	lsls	r3, r3, #3
 80001d0:	22ff      	movs	r2, #255	@ 0xff
 80001d2:	fa02 f303 	lsl.w	r3, r2, r3
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b19      	ldr	r3, [pc, #100]	@ (8000240 <HandleFrontRadarPulses+0xf4>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	401a      	ands	r2, r3
 80001de:	697b      	ldr	r3, [r7, #20]
 80001e0:	00db      	lsls	r3, r3, #3
 80001e2:	fa22 f303 	lsr.w	r3, r2, r3
 80001e6:	81fb      	strh	r3, [r7, #14]
				front_sensors[i] = packet;
 80001e8:	89fa      	ldrh	r2, [r7, #14]
 80001ea:	4917      	ldr	r1, [pc, #92]	@ (8000248 <HandleFrontRadarPulses+0xfc>)
 80001ec:	697b      	ldr	r3, [r7, #20]
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (packet < front_min_distance) front_min_distance = packet;
 80001f2:	89fb      	ldrh	r3, [r7, #14]
 80001f4:	4a13      	ldr	r2, [pc, #76]	@ (8000244 <HandleFrontRadarPulses+0xf8>)
 80001f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80001fa:	4293      	cmp	r3, r2
 80001fc:	da03      	bge.n	8000206 <HandleFrontRadarPulses+0xba>
 80001fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000202:	4b10      	ldr	r3, [pc, #64]	@ (8000244 <HandleFrontRadarPulses+0xf8>)
 8000204:	801a      	strh	r2, [r3, #0]
			for (int i=0; i<4; i+=1) {
 8000206:	697b      	ldr	r3, [r7, #20]
 8000208:	3301      	adds	r3, #1
 800020a:	617b      	str	r3, [r7, #20]
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	2b03      	cmp	r3, #3
 8000210:	dddc      	ble.n	80001cc <HandleFrontRadarPulses+0x80>
			}
			captured_pulses = 0;
 8000212:	4b0b      	ldr	r3, [pc, #44]	@ (8000240 <HandleFrontRadarPulses+0xf4>)
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
			start_cpatured = 0;
 8000218:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <HandleFrontRadarPulses+0xec>)
 800021a:	2200      	movs	r2, #0
 800021c:	701a      	strb	r2, [r3, #0]
		}
		index --;
 800021e:	4b07      	ldr	r3, [pc, #28]	@ (800023c <HandleFrontRadarPulses+0xf0>)
 8000220:	f993 3000 	ldrsb.w	r3, [r3]
 8000224:	b2db      	uxtb	r3, r3
 8000226:	3b01      	subs	r3, #1
 8000228:	b2db      	uxtb	r3, r3
 800022a:	b25a      	sxtb	r2, r3
 800022c:	4b03      	ldr	r3, [pc, #12]	@ (800023c <HandleFrontRadarPulses+0xf0>)
 800022e:	701a      	strb	r2, [r3, #0]
	}
}
 8000230:	3718      	adds	r7, #24
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	20000197 	.word	0x20000197
 800023c:	20000005 	.word	0x20000005
 8000240:	20000198 	.word	0x20000198
 8000244:	20000000 	.word	0x20000000
 8000248:	20000170 	.word	0x20000170

0800024c <HandleRearRadarPulses>:

void HandleRearRadarPulses(TIM_HandleTypeDef *htim)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	static int8_t 		index = RADAR_PULSES_NUMBER;
	static int8_t 		start_cpatured = 0;
	static uint32_t 	captured_pulses = 0;
	uint32_t 			pulse = 0;
 8000254:	2300      	movs	r3, #0
 8000256:	613b      	str	r3, [r7, #16]
	uint16_t 			packet = 0;
 8000258:	2300      	movs	r3, #0
 800025a:	81fb      	strh	r3, [r7, #14]

	pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800025c:	2104      	movs	r1, #4
 800025e:	6878      	ldr	r0, [r7, #4]
 8000260:	f003 fea6 	bl	8003fb0 <HAL_TIM_ReadCapturedValue>
 8000264:	6138      	str	r0, [r7, #16]

	if (IS_START_PULSE(pulse))
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	f240 726c 	movw	r2, #1900	@ 0x76c
 800026c:	4293      	cmp	r3, r2
 800026e:	d80b      	bhi.n	8000288 <HandleRearRadarPulses+0x3c>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	f240 7243 	movw	r2, #1859	@ 0x743
 8000276:	4293      	cmp	r3, r2
 8000278:	d906      	bls.n	8000288 <HandleRearRadarPulses+0x3c>
	{
		start_cpatured = 1;
 800027a:	4b2f      	ldr	r3, [pc, #188]	@ (8000338 <HandleRearRadarPulses+0xec>)
 800027c:	2201      	movs	r2, #1
 800027e:	701a      	strb	r2, [r3, #0]
		index = RADAR_PULSES_NUMBER;
 8000280:	4b2e      	ldr	r3, [pc, #184]	@ (800033c <HandleRearRadarPulses+0xf0>)
 8000282:	2220      	movs	r2, #32
 8000284:	701a      	strb	r2, [r3, #0]
		return;
 8000286:	e053      	b.n	8000330 <HandleRearRadarPulses+0xe4>
	}
	if (start_cpatured){
 8000288:	4b2b      	ldr	r3, [pc, #172]	@ (8000338 <HandleRearRadarPulses+0xec>)
 800028a:	f993 3000 	ldrsb.w	r3, [r3]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d04e      	beq.n	8000330 <HandleRearRadarPulses+0xe4>
		if (IS_HIGH_PULSE(pulse)) captured_pulses |= (1 << index);
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	2bdc      	cmp	r3, #220	@ 0xdc
 8000296:	d80e      	bhi.n	80002b6 <HandleRearRadarPulses+0x6a>
 8000298:	693b      	ldr	r3, [r7, #16]
 800029a:	2bb3      	cmp	r3, #179	@ 0xb3
 800029c:	d90b      	bls.n	80002b6 <HandleRearRadarPulses+0x6a>
 800029e:	4b27      	ldr	r3, [pc, #156]	@ (800033c <HandleRearRadarPulses+0xf0>)
 80002a0:	f993 3000 	ldrsb.w	r3, [r3]
 80002a4:	461a      	mov	r2, r3
 80002a6:	2301      	movs	r3, #1
 80002a8:	4093      	lsls	r3, r2
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b24      	ldr	r3, [pc, #144]	@ (8000340 <HandleRearRadarPulses+0xf4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4313      	orrs	r3, r2
 80002b2:	4a23      	ldr	r2, [pc, #140]	@ (8000340 <HandleRearRadarPulses+0xf4>)
 80002b4:	6013      	str	r3, [r2, #0]

		if (index == 0) {
 80002b6:	4b21      	ldr	r3, [pc, #132]	@ (800033c <HandleRearRadarPulses+0xf0>)
 80002b8:	f993 3000 	ldrsb.w	r3, [r3]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d12e      	bne.n	800031e <HandleRearRadarPulses+0xd2>
			rear_min_distance = 255;
 80002c0:	4b20      	ldr	r3, [pc, #128]	@ (8000344 <HandleRearRadarPulses+0xf8>)
 80002c2:	22ff      	movs	r2, #255	@ 0xff
 80002c4:	801a      	strh	r2, [r3, #0]
			for (int i=0; i<4; i+=1) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]
 80002ca:	e01f      	b.n	800030c <HandleRearRadarPulses+0xc0>
				packet = (captured_pulses & (255 << (RADAR_PACKET_LENGTH * i))) >> (RADAR_PACKET_LENGTH * i);
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	00db      	lsls	r3, r3, #3
 80002d0:	22ff      	movs	r2, #255	@ 0xff
 80002d2:	fa02 f303 	lsl.w	r3, r2, r3
 80002d6:	461a      	mov	r2, r3
 80002d8:	4b19      	ldr	r3, [pc, #100]	@ (8000340 <HandleRearRadarPulses+0xf4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	401a      	ands	r2, r3
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	00db      	lsls	r3, r3, #3
 80002e2:	fa22 f303 	lsr.w	r3, r2, r3
 80002e6:	81fb      	strh	r3, [r7, #14]
				rear_sensors[i] = packet;
 80002e8:	89fa      	ldrh	r2, [r7, #14]
 80002ea:	4917      	ldr	r1, [pc, #92]	@ (8000348 <HandleRearRadarPulses+0xfc>)
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (packet < rear_min_distance) rear_min_distance = packet;
 80002f2:	89fb      	ldrh	r3, [r7, #14]
 80002f4:	4a13      	ldr	r2, [pc, #76]	@ (8000344 <HandleRearRadarPulses+0xf8>)
 80002f6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80002fa:	4293      	cmp	r3, r2
 80002fc:	da03      	bge.n	8000306 <HandleRearRadarPulses+0xba>
 80002fe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000302:	4b10      	ldr	r3, [pc, #64]	@ (8000344 <HandleRearRadarPulses+0xf8>)
 8000304:	801a      	strh	r2, [r3, #0]
			for (int i=0; i<4; i+=1) {
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	3301      	adds	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	2b03      	cmp	r3, #3
 8000310:	dddc      	ble.n	80002cc <HandleRearRadarPulses+0x80>
			}
			captured_pulses = 0;
 8000312:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <HandleRearRadarPulses+0xf4>)
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
			start_cpatured = 0;
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <HandleRearRadarPulses+0xec>)
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
		}
		index --;
 800031e:	4b07      	ldr	r3, [pc, #28]	@ (800033c <HandleRearRadarPulses+0xf0>)
 8000320:	f993 3000 	ldrsb.w	r3, [r3]
 8000324:	b2db      	uxtb	r3, r3
 8000326:	3b01      	subs	r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	b25a      	sxtb	r2, r3
 800032c:	4b03      	ldr	r3, [pc, #12]	@ (800033c <HandleRearRadarPulses+0xf0>)
 800032e:	701a      	strb	r2, [r3, #0]
	}
}
 8000330:	3718      	adds	r7, #24
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	2000019c 	.word	0x2000019c
 800033c:	20000006 	.word	0x20000006
 8000340:	200001a0 	.word	0x200001a0
 8000344:	20000002 	.word	0x20000002
 8000348:	20000180 	.word	0x20000180

0800034c <can_send_sensors>:

void can_send_sensors(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0

	if (notification) {
 8000350:	4b1e      	ldr	r3, [pc, #120]	@ (80003cc <can_send_sensors+0x80>)
 8000352:	f993 3000 	ldrsb.w	r3, [r3]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d036      	beq.n	80003c8 <can_send_sensors+0x7c>
		static uint8_t TxData[8];
		TxHeader.StdId = CAN_SPA_STATUS_FRAME_ID;
 800035a:	4b1d      	ldr	r3, [pc, #116]	@ (80003d0 <can_send_sensors+0x84>)
 800035c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000360:	601a      	str	r2, [r3, #0]
		TxData[0] = rear_sensors[0];
 8000362:	4b1c      	ldr	r3, [pc, #112]	@ (80003d4 <can_send_sensors+0x88>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	b2da      	uxtb	r2, r3
 8000368:	4b1b      	ldr	r3, [pc, #108]	@ (80003d8 <can_send_sensors+0x8c>)
 800036a:	701a      	strb	r2, [r3, #0]
		TxData[1] = rear_sensors[1];
 800036c:	4b19      	ldr	r3, [pc, #100]	@ (80003d4 <can_send_sensors+0x88>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4b19      	ldr	r3, [pc, #100]	@ (80003d8 <can_send_sensors+0x8c>)
 8000374:	705a      	strb	r2, [r3, #1]
		TxData[2] = rear_sensors[2];
 8000376:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <can_send_sensors+0x88>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <can_send_sensors+0x8c>)
 800037e:	709a      	strb	r2, [r3, #2]
		TxData[3] = rear_sensors[3];
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <can_send_sensors+0x88>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	b2da      	uxtb	r2, r3
 8000386:	4b14      	ldr	r3, [pc, #80]	@ (80003d8 <can_send_sensors+0x8c>)
 8000388:	70da      	strb	r2, [r3, #3]
		TxData[4] = front_sensors[0];
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <can_send_sensors+0x90>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	b2da      	uxtb	r2, r3
 8000390:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <can_send_sensors+0x8c>)
 8000392:	711a      	strb	r2, [r3, #4]
		TxData[5] = front_sensors[1];
 8000394:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <can_send_sensors+0x90>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	b2da      	uxtb	r2, r3
 800039a:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <can_send_sensors+0x8c>)
 800039c:	715a      	strb	r2, [r3, #5]
		TxData[6] = front_sensors[2];
 800039e:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <can_send_sensors+0x90>)
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <can_send_sensors+0x8c>)
 80003a6:	719a      	strb	r2, [r3, #6]
		TxData[7] = front_sensors[3];
 80003a8:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <can_send_sensors+0x90>)
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	4b0a      	ldr	r3, [pc, #40]	@ (80003d8 <can_send_sensors+0x8c>)
 80003b0:	71da      	strb	r2, [r3, #7]
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <can_send_sensors+0x94>)
 80003b4:	4a08      	ldr	r2, [pc, #32]	@ (80003d8 <can_send_sensors+0x8c>)
 80003b6:	4906      	ldr	r1, [pc, #24]	@ (80003d0 <can_send_sensors+0x84>)
 80003b8:	480a      	ldr	r0, [pc, #40]	@ (80003e4 <can_send_sensors+0x98>)
 80003ba:	f001 fd33 	bl	8001e24 <HAL_CAN_AddTxMessage>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <can_send_sensors+0x7c>
		{
			Error_Handler();
 80003c4:	f001 f90e 	bl	80015e4 <Error_Handler>
		}
	}
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000191 	.word	0x20000191
 80003d0:	20000130 	.word	0x20000130
 80003d4:	20000180 	.word	0x20000180
 80003d8:	200001a4 	.word	0x200001a4
 80003dc:	20000170 	.word	0x20000170
 80003e0:	2000016c 	.word	0x2000016c
 80003e4:	20000030 	.word	0x20000030

080003e8 <send_front_beep_distance>:

void send_front_beep_distance(){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	static uint8_t TxData[8];
		TxHeader.StdId = CAN_SID_BEEP_FRAME_ID;
 80003ec:	4b0b      	ldr	r3, [pc, #44]	@ (800041c <send_front_beep_distance+0x34>)
 80003ee:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80003f2:	601a      	str	r2, [r3, #0]
		TxData[1] |= 1 << 2;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000420 <send_front_beep_distance+0x38>)
 80003f6:	785b      	ldrb	r3, [r3, #1]
 80003f8:	f043 0304 	orr.w	r3, r3, #4
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <send_front_beep_distance+0x38>)
 8000400:	705a      	strb	r2, [r3, #1]
		//	TxData[1] |= 1 << x - 2 beep; 3 turn click; 4 turn click2; 5 seat belts; 6 tick tick;
		//	TxData[2] |= 1 << x - 6 quick beep; 7 long beep
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000402:	4b08      	ldr	r3, [pc, #32]	@ (8000424 <send_front_beep_distance+0x3c>)
 8000404:	4a06      	ldr	r2, [pc, #24]	@ (8000420 <send_front_beep_distance+0x38>)
 8000406:	4905      	ldr	r1, [pc, #20]	@ (800041c <send_front_beep_distance+0x34>)
 8000408:	4807      	ldr	r0, [pc, #28]	@ (8000428 <send_front_beep_distance+0x40>)
 800040a:	f001 fd0b 	bl	8001e24 <HAL_CAN_AddTxMessage>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <send_front_beep_distance+0x30>
		{
			Error_Handler();
 8000414:	f001 f8e6 	bl	80015e4 <Error_Handler>
		}
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000130 	.word	0x20000130
 8000420:	200001ac 	.word	0x200001ac
 8000424:	2000016c 	.word	0x2000016c
 8000428:	20000030 	.word	0x20000030

0800042c <send_rear_beep_distance>:
		{
			Error_Handler();
		}
}

void send_rear_beep_distance(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	static uint8_t TxData[8];
		TxHeader.StdId = CAN_SID_BEEP_FRAME_ID;
 8000430:	4b0b      	ldr	r3, [pc, #44]	@ (8000460 <send_rear_beep_distance+0x34>)
 8000432:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8000436:	601a      	str	r2, [r3, #0]
		TxData[1] |= 1 << 2;
 8000438:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <send_rear_beep_distance+0x38>)
 800043a:	785b      	ldrb	r3, [r3, #1]
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <send_rear_beep_distance+0x38>)
 8000444:	705a      	strb	r2, [r3, #1]
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8000446:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <send_rear_beep_distance+0x3c>)
 8000448:	4a06      	ldr	r2, [pc, #24]	@ (8000464 <send_rear_beep_distance+0x38>)
 800044a:	4905      	ldr	r1, [pc, #20]	@ (8000460 <send_rear_beep_distance+0x34>)
 800044c:	4807      	ldr	r0, [pc, #28]	@ (800046c <send_rear_beep_distance+0x40>)
 800044e:	f001 fce9 	bl	8001e24 <HAL_CAN_AddTxMessage>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <send_rear_beep_distance+0x30>
		{
			Error_Handler();
 8000458:	f001 f8c4 	bl	80015e4 <Error_Handler>
		}
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000130 	.word	0x20000130
 8000464:	200001b4 	.word	0x200001b4
 8000468:	2000016c 	.word	0x2000016c
 800046c:	20000030 	.word	0x20000030

08000470 <SendFrontParkingSound>:

void SendFrontParkingSound()
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;

	if (notification == 0) return;
 8000474:	4b3c      	ldr	r3, [pc, #240]	@ (8000568 <SendFrontParkingSound+0xf8>)
 8000476:	f993 3000 	ldrsb.w	r3, [r3]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d06a      	beq.n	8000554 <SendFrontParkingSound+0xe4>

	switch(front_min_distance * RADAR_DISTANCE_MULTIPLIER)
 800047e:	4b3b      	ldr	r3, [pc, #236]	@ (800056c <SendFrontParkingSound+0xfc>)
 8000480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000484:	461a      	mov	r2, r3
 8000486:	4613      	mov	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	4413      	add	r3, r2
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000490:	dc69      	bgt.n	8000566 <SendFrontParkingSound+0xf6>
 8000492:	2b65      	cmp	r3, #101	@ 0x65
 8000494:	da49      	bge.n	800052a <SendFrontParkingSound+0xba>
 8000496:	2b64      	cmp	r3, #100	@ 0x64
 8000498:	dc65      	bgt.n	8000566 <SendFrontParkingSound+0xf6>
 800049a:	2b3d      	cmp	r3, #61	@ 0x3d
 800049c:	da30      	bge.n	8000500 <SendFrontParkingSound+0x90>
 800049e:	2b14      	cmp	r3, #20
 80004a0:	dc02      	bgt.n	80004a8 <SendFrontParkingSound+0x38>
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	da04      	bge.n	80004b0 <SendFrontParkingSound+0x40>
 80004a6:	e05e      	b.n	8000566 <SendFrontParkingSound+0xf6>
 80004a8:	3b15      	subs	r3, #21
 80004aa:	2b27      	cmp	r3, #39	@ 0x27
 80004ac:	d85b      	bhi.n	8000566 <SendFrontParkingSound+0xf6>
 80004ae:	e013      	b.n	80004d8 <SendFrontParkingSound+0x68>
	{
	case 0 ... DISTANCE_LIMIT_1:
	{
		if ((HAL_GetTick() - last_time >= DISTANCE_LIMIT_1_TIMEOUT) || last_time == 0)
 80004b0:	f001 faa6 	bl	8001a00 <HAL_GetTick>
 80004b4:	4602      	mov	r2, r0
 80004b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000570 <SendFrontParkingSound+0x100>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	1ad3      	subs	r3, r2, r3
 80004bc:	2b63      	cmp	r3, #99	@ 0x63
 80004be:	d803      	bhi.n	80004c8 <SendFrontParkingSound+0x58>
 80004c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000570 <SendFrontParkingSound+0x100>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d147      	bne.n	8000558 <SendFrontParkingSound+0xe8>
		{
			last_time = HAL_GetTick();
 80004c8:	f001 fa9a 	bl	8001a00 <HAL_GetTick>
 80004cc:	4603      	mov	r3, r0
 80004ce:	4a28      	ldr	r2, [pc, #160]	@ (8000570 <SendFrontParkingSound+0x100>)
 80004d0:	6013      	str	r3, [r2, #0]
			send_front_beep_distance();
 80004d2:	f7ff ff89 	bl	80003e8 <send_front_beep_distance>
		}
	}
	break;
 80004d6:	e03f      	b.n	8000558 <SendFrontParkingSound+0xe8>
	case (DISTANCE_LIMIT_1 + 1) ... DISTANCE_LIMIT_2:
	{
		if ((HAL_GetTick() - last_time >= DISTANCE_LIMIT_2_TIMEOUT) || last_time == 0)
 80004d8:	f001 fa92 	bl	8001a00 <HAL_GetTick>
 80004dc:	4602      	mov	r2, r0
 80004de:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <SendFrontParkingSound+0x100>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80004e6:	d803      	bhi.n	80004f0 <SendFrontParkingSound+0x80>
 80004e8:	4b21      	ldr	r3, [pc, #132]	@ (8000570 <SendFrontParkingSound+0x100>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d135      	bne.n	800055c <SendFrontParkingSound+0xec>
		{
			last_time = HAL_GetTick();
 80004f0:	f001 fa86 	bl	8001a00 <HAL_GetTick>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000570 <SendFrontParkingSound+0x100>)
 80004f8:	6013      	str	r3, [r2, #0]
			send_front_beep_distance();
 80004fa:	f7ff ff75 	bl	80003e8 <send_front_beep_distance>
		}
	}
	break;
 80004fe:	e02d      	b.n	800055c <SendFrontParkingSound+0xec>
	case (DISTANCE_LIMIT_2 + 1) ... DISTANCE_LIMIT_3:
	{
		if ((HAL_GetTick() - last_time >= DISTANCE_LIMIT_3_TIMEOUT) || last_time == 0)
 8000500:	f001 fa7e 	bl	8001a00 <HAL_GetTick>
 8000504:	4602      	mov	r2, r0
 8000506:	4b1a      	ldr	r3, [pc, #104]	@ (8000570 <SendFrontParkingSound+0x100>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	1ad3      	subs	r3, r2, r3
 800050c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000510:	d203      	bcs.n	800051a <SendFrontParkingSound+0xaa>
 8000512:	4b17      	ldr	r3, [pc, #92]	@ (8000570 <SendFrontParkingSound+0x100>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d122      	bne.n	8000560 <SendFrontParkingSound+0xf0>
		{
			last_time = HAL_GetTick();
 800051a:	f001 fa71 	bl	8001a00 <HAL_GetTick>
 800051e:	4603      	mov	r3, r0
 8000520:	4a13      	ldr	r2, [pc, #76]	@ (8000570 <SendFrontParkingSound+0x100>)
 8000522:	6013      	str	r3, [r2, #0]
			send_front_beep_distance();
 8000524:	f7ff ff60 	bl	80003e8 <send_front_beep_distance>
		}
	}
	break;
 8000528:	e01a      	b.n	8000560 <SendFrontParkingSound+0xf0>
	case (DISTANCE_LIMIT_3 + 1) ... DISTANCE_LIMIT_4:
	{
		if ((HAL_GetTick() - last_time >= DISTANCE_LIMIT_4_TIMEOUT) || last_time == 0)
 800052a:	f001 fa69 	bl	8001a00 <HAL_GetTick>
 800052e:	4602      	mov	r2, r0
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <SendFrontParkingSound+0x100>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800053a:	d203      	bcs.n	8000544 <SendFrontParkingSound+0xd4>
 800053c:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <SendFrontParkingSound+0x100>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d10f      	bne.n	8000564 <SendFrontParkingSound+0xf4>
		{
			last_time = HAL_GetTick();
 8000544:	f001 fa5c 	bl	8001a00 <HAL_GetTick>
 8000548:	4603      	mov	r3, r0
 800054a:	4a09      	ldr	r2, [pc, #36]	@ (8000570 <SendFrontParkingSound+0x100>)
 800054c:	6013      	str	r3, [r2, #0]
			send_front_beep_distance();
 800054e:	f7ff ff4b 	bl	80003e8 <send_front_beep_distance>
		}
	}
	break;
 8000552:	e007      	b.n	8000564 <SendFrontParkingSound+0xf4>
	if (notification == 0) return;
 8000554:	bf00      	nop
 8000556:	e006      	b.n	8000566 <SendFrontParkingSound+0xf6>
	break;
 8000558:	bf00      	nop
 800055a:	e004      	b.n	8000566 <SendFrontParkingSound+0xf6>
	break;
 800055c:	bf00      	nop
 800055e:	e002      	b.n	8000566 <SendFrontParkingSound+0xf6>
	break;
 8000560:	bf00      	nop
 8000562:	e000      	b.n	8000566 <SendFrontParkingSound+0xf6>
	break;
 8000564:	bf00      	nop
	}
}
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000191 	.word	0x20000191
 800056c:	20000000 	.word	0x20000000
 8000570:	200001bc 	.word	0x200001bc

08000574 <SendRearParkingSound>:

void SendRearParkingSound()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	static uint32_t last_time = 0;

	if (notification == 0) return;
 8000578:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <SendRearParkingSound+0xf8>)
 800057a:	f993 3000 	ldrsb.w	r3, [r3]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d06a      	beq.n	8000658 <SendRearParkingSound+0xe4>

	switch(rear_min_distance * RADAR_DISTANCE_MULTIPLIER)
 8000582:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <SendRearParkingSound+0xfc>)
 8000584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000588:	461a      	mov	r2, r3
 800058a:	4613      	mov	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	4413      	add	r3, r2
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	2bc8      	cmp	r3, #200	@ 0xc8
 8000594:	dc69      	bgt.n	800066a <SendRearParkingSound+0xf6>
 8000596:	2b65      	cmp	r3, #101	@ 0x65
 8000598:	da49      	bge.n	800062e <SendRearParkingSound+0xba>
 800059a:	2b64      	cmp	r3, #100	@ 0x64
 800059c:	dc65      	bgt.n	800066a <SendRearParkingSound+0xf6>
 800059e:	2b3d      	cmp	r3, #61	@ 0x3d
 80005a0:	da30      	bge.n	8000604 <SendRearParkingSound+0x90>
 80005a2:	2b14      	cmp	r3, #20
 80005a4:	dc02      	bgt.n	80005ac <SendRearParkingSound+0x38>
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	da04      	bge.n	80005b4 <SendRearParkingSound+0x40>
 80005aa:	e05e      	b.n	800066a <SendRearParkingSound+0xf6>
 80005ac:	3b15      	subs	r3, #21
 80005ae:	2b27      	cmp	r3, #39	@ 0x27
 80005b0:	d85b      	bhi.n	800066a <SendRearParkingSound+0xf6>
 80005b2:	e013      	b.n	80005dc <SendRearParkingSound+0x68>
	{
	case 0 ... DISTANCE_LIMIT_1:
	{
		if ((HAL_GetTick() - last_time >= DISTANCE_LIMIT_1_TIMEOUT) || last_time == 0)
 80005b4:	f001 fa24 	bl	8001a00 <HAL_GetTick>
 80005b8:	4602      	mov	r2, r0
 80005ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000674 <SendRearParkingSound+0x100>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	2b63      	cmp	r3, #99	@ 0x63
 80005c2:	d803      	bhi.n	80005cc <SendRearParkingSound+0x58>
 80005c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000674 <SendRearParkingSound+0x100>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d147      	bne.n	800065c <SendRearParkingSound+0xe8>
		{
			last_time = HAL_GetTick();
 80005cc:	f001 fa18 	bl	8001a00 <HAL_GetTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a28      	ldr	r2, [pc, #160]	@ (8000674 <SendRearParkingSound+0x100>)
 80005d4:	6013      	str	r3, [r2, #0]
			send_rear_beep_distance();
 80005d6:	f7ff ff29 	bl	800042c <send_rear_beep_distance>
		}
	}
	break;
 80005da:	e03f      	b.n	800065c <SendRearParkingSound+0xe8>
	case (DISTANCE_LIMIT_1 + 1) ... DISTANCE_LIMIT_2:
	{
		if ((HAL_GetTick() - last_time >= DISTANCE_LIMIT_2_TIMEOUT) || last_time == 0)
 80005dc:	f001 fa10 	bl	8001a00 <HAL_GetTick>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <SendRearParkingSound+0x100>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80005ea:	d803      	bhi.n	80005f4 <SendRearParkingSound+0x80>
 80005ec:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <SendRearParkingSound+0x100>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d135      	bne.n	8000660 <SendRearParkingSound+0xec>
		{
			last_time = HAL_GetTick();
 80005f4:	f001 fa04 	bl	8001a00 <HAL_GetTick>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000674 <SendRearParkingSound+0x100>)
 80005fc:	6013      	str	r3, [r2, #0]
			send_rear_beep_distance();
 80005fe:	f7ff ff15 	bl	800042c <send_rear_beep_distance>
		}
	}
	break;
 8000602:	e02d      	b.n	8000660 <SendRearParkingSound+0xec>
	case (DISTANCE_LIMIT_2 + 1) ... DISTANCE_LIMIT_3:
	{
		if ((HAL_GetTick() - last_time >= DISTANCE_LIMIT_3_TIMEOUT) || last_time == 0)
 8000604:	f001 f9fc 	bl	8001a00 <HAL_GetTick>
 8000608:	4602      	mov	r2, r0
 800060a:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <SendRearParkingSound+0x100>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000614:	d203      	bcs.n	800061e <SendRearParkingSound+0xaa>
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <SendRearParkingSound+0x100>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d122      	bne.n	8000664 <SendRearParkingSound+0xf0>
		{
			last_time = HAL_GetTick();
 800061e:	f001 f9ef 	bl	8001a00 <HAL_GetTick>
 8000622:	4603      	mov	r3, r0
 8000624:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <SendRearParkingSound+0x100>)
 8000626:	6013      	str	r3, [r2, #0]
			send_rear_beep_distance();
 8000628:	f7ff ff00 	bl	800042c <send_rear_beep_distance>
		}
	}
	break;
 800062c:	e01a      	b.n	8000664 <SendRearParkingSound+0xf0>
	case (DISTANCE_LIMIT_3 + 1) ... DISTANCE_LIMIT_4:
	{
		if ((HAL_GetTick() - last_time >= DISTANCE_LIMIT_4_TIMEOUT) || last_time == 0)
 800062e:	f001 f9e7 	bl	8001a00 <HAL_GetTick>
 8000632:	4602      	mov	r2, r0
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <SendRearParkingSound+0x100>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800063e:	d203      	bcs.n	8000648 <SendRearParkingSound+0xd4>
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <SendRearParkingSound+0x100>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10f      	bne.n	8000668 <SendRearParkingSound+0xf4>
		{
			last_time = HAL_GetTick();
 8000648:	f001 f9da 	bl	8001a00 <HAL_GetTick>
 800064c:	4603      	mov	r3, r0
 800064e:	4a09      	ldr	r2, [pc, #36]	@ (8000674 <SendRearParkingSound+0x100>)
 8000650:	6013      	str	r3, [r2, #0]
			send_rear_beep_distance();
 8000652:	f7ff feeb 	bl	800042c <send_rear_beep_distance>
		}
	}
	break;
 8000656:	e007      	b.n	8000668 <SendRearParkingSound+0xf4>
	if (notification == 0) return;
 8000658:	bf00      	nop
 800065a:	e006      	b.n	800066a <SendRearParkingSound+0xf6>
	break;
 800065c:	bf00      	nop
 800065e:	e004      	b.n	800066a <SendRearParkingSound+0xf6>
	break;
 8000660:	bf00      	nop
 8000662:	e002      	b.n	800066a <SendRearParkingSound+0xf6>
	break;
 8000664:	bf00      	nop
 8000666:	e000      	b.n	800066a <SendRearParkingSound+0xf6>
	break;
 8000668:	bf00      	nop
	}
}
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000191 	.word	0x20000191
 8000670:	20000002 	.word	0x20000002
 8000674:	200001c0 	.word	0x200001c0

08000678 <HandleCameraState>:


void HandleCameraState(int16_t state)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, RIGHT_CAMERA_PIN,
			CHECK_BIT(state, RIGHT_CAMERA_INDEX) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000686:	f003 0301 	and.w	r3, r3, #1
	HAL_GPIO_WritePin(GPIOA, RIGHT_CAMERA_PIN,
 800068a:	2b00      	cmp	r3, #0
 800068c:	bf0c      	ite	eq
 800068e:	2301      	moveq	r3, #1
 8000690:	2300      	movne	r3, #0
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	2108      	movs	r1, #8
 8000698:	4822      	ldr	r0, [pc, #136]	@ (8000724 <HandleCameraState+0xac>)
 800069a:	f002 faa4 	bl	8002be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LEFT_CAMERA_PIN,
			CHECK_BIT(state, LEFT_CAMERA_INDEX) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800069e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a2:	105b      	asrs	r3, r3, #1
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	f003 0301 	and.w	r3, r3, #1
	HAL_GPIO_WritePin(GPIOA, LEFT_CAMERA_PIN,
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf0c      	ite	eq
 80006b0:	2301      	moveq	r3, #1
 80006b2:	2300      	movne	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	461a      	mov	r2, r3
 80006b8:	2110      	movs	r1, #16
 80006ba:	481a      	ldr	r0, [pc, #104]	@ (8000724 <HandleCameraState+0xac>)
 80006bc:	f002 fa93 	bl	8002be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, FRONT_CAMERA_PIN,
			CHECK_BIT(state, FRONT_CAMERA_INDEX) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80006c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c4:	109b      	asrs	r3, r3, #2
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
	HAL_GPIO_WritePin(GPIOA, FRONT_CAMERA_PIN,
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	bf0c      	ite	eq
 80006d2:	2301      	moveq	r3, #1
 80006d4:	2300      	movne	r3, #0
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	461a      	mov	r2, r3
 80006da:	2120      	movs	r1, #32
 80006dc:	4811      	ldr	r0, [pc, #68]	@ (8000724 <HandleCameraState+0xac>)
 80006de:	f002 fa82 	bl	8002be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, REAR_CAMERA_PIN,
			CHECK_BIT(state, REAR_CAMERA_INDEX) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80006e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006e6:	10db      	asrs	r3, r3, #3
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	f003 0301 	and.w	r3, r3, #1
	HAL_GPIO_WritePin(GPIOA, REAR_CAMERA_PIN,
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	bf0c      	ite	eq
 80006f4:	2301      	moveq	r3, #1
 80006f6:	2300      	movne	r3, #0
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	461a      	mov	r2, r3
 80006fc:	2180      	movs	r1, #128	@ 0x80
 80006fe:	4809      	ldr	r0, [pc, #36]	@ (8000724 <HandleCameraState+0xac>)
 8000700:	f002 fa71 	bl	8002be6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, VIDEO_OUTPUT_PIN, state != 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf0c      	ite	eq
 800070c:	2301      	moveq	r3, #1
 800070e:	2300      	movne	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	461a      	mov	r2, r3
 8000714:	2101      	movs	r1, #1
 8000716:	4804      	ldr	r0, [pc, #16]	@ (8000728 <HandleCameraState+0xb0>)
 8000718:	f002 fa65 	bl	8002be6 <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40010800 	.word	0x40010800
 8000728:	40010c00 	.word	0x40010c00

0800072c <StartRadar>:

void StartRadar(){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	start_radar = 1;
 8000730:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <StartRadar+0x18>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, PARKING_RADAR_PIN, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2104      	movs	r1, #4
 800073a:	4803      	ldr	r0, [pc, #12]	@ (8000748 <StartRadar+0x1c>)
 800073c:	f002 fa53 	bl	8002be6 <HAL_GPIO_WritePin>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000190 	.word	0x20000190
 8000748:	40010800 	.word	0x40010800

0800074c <StopRadar>:

void StopRadar(){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	start_radar = 0;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <StopRadar+0x44>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
	notification = 0;
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <StopRadar+0x48>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
	send_can_status = 0;
 800075c:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <StopRadar+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
	memset(front_sensors, 255, 4*sizeof(front_sensors[0]));
 8000762:	2210      	movs	r2, #16
 8000764:	21ff      	movs	r1, #255	@ 0xff
 8000766:	480d      	ldr	r0, [pc, #52]	@ (800079c <StopRadar+0x50>)
 8000768:	f004 f942 	bl	80049f0 <memset>
	memset(rear_sensors, 255, 4*sizeof(rear_sensors[0]));
 800076c:	2210      	movs	r2, #16
 800076e:	21ff      	movs	r1, #255	@ 0xff
 8000770:	480b      	ldr	r0, [pc, #44]	@ (80007a0 <StopRadar+0x54>)
 8000772:	f004 f93d 	bl	80049f0 <memset>
	front_min_distance = 255;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <StopRadar+0x58>)
 8000778:	22ff      	movs	r2, #255	@ 0xff
 800077a:	801a      	strh	r2, [r3, #0]
	rear_min_distance = 255;
 800077c:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <StopRadar+0x5c>)
 800077e:	22ff      	movs	r2, #255	@ 0xff
 8000780:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, PARKING_RADAR_PIN, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2104      	movs	r1, #4
 8000786:	4809      	ldr	r0, [pc, #36]	@ (80007ac <StopRadar+0x60>)
 8000788:	f002 fa2d 	bl	8002be6 <HAL_GPIO_WritePin>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000190 	.word	0x20000190
 8000794:	20000191 	.word	0x20000191
 8000798:	20000194 	.word	0x20000194
 800079c:	20000170 	.word	0x20000170
 80007a0:	20000180 	.word	0x20000180
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000002 	.word	0x20000002
 80007ac:	40010800 	.word	0x40010800

080007b0 <HandleRadarState>:

void HandleRadarState(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	if (CHECK_RADAR_ON) StartRadar();
 80007b4:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <HandleRadarState+0x3c>)
 80007b6:	f993 3000 	ldrsb.w	r3, [r3]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d104      	bne.n	80007c8 <HandleRadarState+0x18>
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <HandleRadarState+0x40>)
 80007c0:	f993 3000 	ldrsb.w	r3, [r3]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d002      	beq.n	80007ce <HandleRadarState+0x1e>
 80007c8:	f7ff ffb0 	bl	800072c <StartRadar>
	else if (CHECK_RADAR_OFF) StopRadar();
}
 80007cc:	e00b      	b.n	80007e6 <HandleRadarState+0x36>
	else if (CHECK_RADAR_OFF) StopRadar();
 80007ce:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <HandleRadarState+0x3c>)
 80007d0:	f993 3000 	ldrsb.w	r3, [r3]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d106      	bne.n	80007e6 <HandleRadarState+0x36>
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HandleRadarState+0x40>)
 80007da:	f993 3000 	ldrsb.w	r3, [r3]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d101      	bne.n	80007e6 <HandleRadarState+0x36>
 80007e2:	f7ff ffb3 	bl	800074c <StopRadar>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000195 	.word	0x20000195
 80007f0:	20000196 	.word	0x20000196

080007f4 <StopRightTurn>:

void StopRightTurn() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	CLEAR_INDEX_BIT(parking_camera_state, RIGHT_CAMERA_INDEX);
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <StopRightTurn+0x24>)
 80007fa:	f993 3000 	ldrsb.w	r3, [r3]
 80007fe:	f023 0301 	bic.w	r3, r3, #1
 8000802:	b25a      	sxtb	r2, r3
 8000804:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <StopRightTurn+0x24>)
 8000806:	701a      	strb	r2, [r3, #0]
	HandleCameraState(parking_camera_state);
 8000808:	4b03      	ldr	r3, [pc, #12]	@ (8000818 <StopRightTurn+0x24>)
 800080a:	f993 3000 	ldrsb.w	r3, [r3]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff32 	bl	8000678 <HandleCameraState>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000195 	.word	0x20000195

0800081c <HandleRightTurnCountdown>:

void HandleRightTurnCountdown(int32_t stop_time){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	static int32_t last_stop_triggered = 0;

	if (stop_time != 0) last_stop_triggered = stop_time;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <HandleRightTurnCountdown+0x14>
 800082a:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <HandleRightTurnCountdown+0x5c>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6013      	str	r3, [r2, #0]
	if (right_turn == 1) last_stop_triggered = 0;
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HandleRightTurnCountdown+0x60>)
 8000832:	f993 3000 	ldrsb.w	r3, [r3]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d102      	bne.n	8000840 <HandleRightTurnCountdown+0x24>
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <HandleRightTurnCountdown+0x5c>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]

	if (last_stop_triggered != 0 && ((HAL_GetTick() - last_stop_triggered > 300) || left_turn == 1)) {
 8000840:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <HandleRightTurnCountdown+0x5c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d012      	beq.n	800086e <HandleRightTurnCountdown+0x52>
 8000848:	f001 f8da 	bl	8001a00 <HAL_GetTick>
 800084c:	4603      	mov	r3, r0
 800084e:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <HandleRightTurnCountdown+0x5c>)
 8000850:	6812      	ldr	r2, [r2, #0]
 8000852:	1a9b      	subs	r3, r3, r2
 8000854:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000858:	d804      	bhi.n	8000864 <HandleRightTurnCountdown+0x48>
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <HandleRightTurnCountdown+0x64>)
 800085c:	f993 3000 	ldrsb.w	r3, [r3]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d104      	bne.n	800086e <HandleRightTurnCountdown+0x52>
		StopRightTurn();
 8000864:	f7ff ffc6 	bl	80007f4 <StopRightTurn>
		last_stop_triggered = 0;
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <HandleRightTurnCountdown+0x5c>)
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
	}
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200001c4 	.word	0x200001c4
 800087c:	20000193 	.word	0x20000193
 8000880:	20000192 	.word	0x20000192

08000884 <HandleRightTurn>:

void HandleRightTurn(uint8_t left, uint8_t right){
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	460a      	mov	r2, r1
 800088e:	71fb      	strb	r3, [r7, #7]
 8000890:	4613      	mov	r3, r2
 8000892:	71bb      	strb	r3, [r7, #6]

	if (left == 1 && right == 1) return;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d102      	bne.n	80008a0 <HandleRightTurn+0x1c>
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d053      	beq.n	8000948 <HandleRightTurn+0xc4>

	if (right == 1 && CHECK_F_OR_R_VIDEO){
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d12a      	bne.n	80008fc <HandleRightTurn+0x78>
 80008a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <HandleRightTurn+0xcc>)
 80008a8:	f993 3000 	ldrsb.w	r3, [r3]
 80008ac:	109b      	asrs	r3, r3, #2
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d109      	bne.n	80008ce <HandleRightTurn+0x4a>
 80008ba:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <HandleRightTurn+0xcc>)
 80008bc:	f993 3000 	ldrsb.w	r3, [r3]
 80008c0:	10db      	asrs	r3, r3, #3
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d016      	beq.n	80008fc <HandleRightTurn+0x78>
		if (right_turn == 0){
 80008ce:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <HandleRightTurn+0xd0>)
 80008d0:	f993 3000 	ldrsb.w	r3, [r3]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d138      	bne.n	800094a <HandleRightTurn+0xc6>
			right_turn = 1;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <HandleRightTurn+0xd0>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]
			SET_INDEX_BIT(parking_camera_state, RIGHT_CAMERA_INDEX);
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <HandleRightTurn+0xcc>)
 80008e0:	f993 3000 	ldrsb.w	r3, [r3]
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	b25a      	sxtb	r2, r3
 80008ea:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <HandleRightTurn+0xcc>)
 80008ec:	701a      	strb	r2, [r3, #0]
			HandleCameraState(parking_camera_state);
 80008ee:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <HandleRightTurn+0xcc>)
 80008f0:	f993 3000 	ldrsb.w	r3, [r3]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff febf 	bl	8000678 <HandleCameraState>
		if (right_turn == 0){
 80008fa:	e026      	b.n	800094a <HandleRightTurn+0xc6>
		}
	}
	else {
		if (right_turn == 1) {
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <HandleRightTurn+0xd0>)
 80008fe:	f993 3000 	ldrsb.w	r3, [r3]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d121      	bne.n	800094a <HandleRightTurn+0xc6>
			right_turn = 0;
 8000906:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <HandleRightTurn+0xd0>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
			if (CHECK_F_R_VIDEO_OFF){
 800090c:	4b10      	ldr	r3, [pc, #64]	@ (8000950 <HandleRightTurn+0xcc>)
 800090e:	f993 3000 	ldrsb.w	r3, [r3]
 8000912:	109b      	asrs	r3, r3, #2
 8000914:	b25b      	sxtb	r3, r3
 8000916:	b2db      	uxtb	r3, r3
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d10c      	bne.n	800093a <HandleRightTurn+0xb6>
 8000920:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <HandleRightTurn+0xcc>)
 8000922:	f993 3000 	ldrsb.w	r3, [r3]
 8000926:	10db      	asrs	r3, r3, #3
 8000928:	b25b      	sxtb	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <HandleRightTurn+0xb6>
				StopRightTurn();
 8000934:	f7ff ff5e 	bl	80007f4 <StopRightTurn>
 8000938:	e007      	b.n	800094a <HandleRightTurn+0xc6>
			}
			else HandleRightTurnCountdown(HAL_GetTick());
 800093a:	f001 f861 	bl	8001a00 <HAL_GetTick>
 800093e:	4603      	mov	r3, r0
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff6b 	bl	800081c <HandleRightTurnCountdown>
 8000946:	e000      	b.n	800094a <HandleRightTurn+0xc6>
	if (left == 1 && right == 1) return;
 8000948:	bf00      	nop
		}
	}
}
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000195 	.word	0x20000195
 8000954:	20000193 	.word	0x20000193

08000958 <StopLeftTurn>:

void StopLeftTurn() {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	CLEAR_INDEX_BIT(parking_camera_state, LEFT_CAMERA_INDEX);
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <StopLeftTurn+0x24>)
 800095e:	f993 3000 	ldrsb.w	r3, [r3]
 8000962:	f023 0302 	bic.w	r3, r3, #2
 8000966:	b25a      	sxtb	r2, r3
 8000968:	4b04      	ldr	r3, [pc, #16]	@ (800097c <StopLeftTurn+0x24>)
 800096a:	701a      	strb	r2, [r3, #0]
	HandleCameraState(parking_camera_state);
 800096c:	4b03      	ldr	r3, [pc, #12]	@ (800097c <StopLeftTurn+0x24>)
 800096e:	f993 3000 	ldrsb.w	r3, [r3]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe80 	bl	8000678 <HandleCameraState>
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000195 	.word	0x20000195

08000980 <HandleLeftTurnCountdown>:

void HandleLeftTurnCountdown(int32_t stop_time){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	static int32_t last_stop_triggered = 0;

	if (stop_time != 0) last_stop_triggered = stop_time;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <HandleLeftTurnCountdown+0x14>
 800098e:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <HandleLeftTurnCountdown+0x60>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6013      	str	r3, [r2, #0]
	if (left_turn == 1) last_stop_triggered = 0;
 8000994:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <HandleLeftTurnCountdown+0x64>)
 8000996:	f993 3000 	ldrsb.w	r3, [r3]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d102      	bne.n	80009a4 <HandleLeftTurnCountdown+0x24>
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <HandleLeftTurnCountdown+0x60>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]

	if (last_stop_triggered != 0 && ((HAL_GetTick() - last_stop_triggered > 300) || right_turn == 1)) {
 80009a4:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <HandleLeftTurnCountdown+0x60>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d015      	beq.n	80009d8 <HandleLeftTurnCountdown+0x58>
 80009ac:	f001 f828 	bl	8001a00 <HAL_GetTick>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a0b      	ldr	r2, [pc, #44]	@ (80009e0 <HandleLeftTurnCountdown+0x60>)
 80009b4:	6812      	ldr	r2, [r2, #0]
 80009b6:	1a9b      	subs	r3, r3, r2
 80009b8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80009bc:	d804      	bhi.n	80009c8 <HandleLeftTurnCountdown+0x48>
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <HandleLeftTurnCountdown+0x68>)
 80009c0:	f993 3000 	ldrsb.w	r3, [r3]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d107      	bne.n	80009d8 <HandleLeftTurnCountdown+0x58>
		left_turn = 0;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HandleLeftTurnCountdown+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
		StopLeftTurn();
 80009ce:	f7ff ffc3 	bl	8000958 <StopLeftTurn>
		last_stop_triggered = 0;
 80009d2:	4b03      	ldr	r3, [pc, #12]	@ (80009e0 <HandleLeftTurnCountdown+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
	}
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200001c8 	.word	0x200001c8
 80009e4:	20000192 	.word	0x20000192
 80009e8:	20000193 	.word	0x20000193

080009ec <HandleLeftTurn>:

void HandleLeftTurn(uint8_t left, uint8_t right){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	460a      	mov	r2, r1
 80009f6:	71fb      	strb	r3, [r7, #7]
 80009f8:	4613      	mov	r3, r2
 80009fa:	71bb      	strb	r3, [r7, #6]

	if (left == 1 && right == 1) return;
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d102      	bne.n	8000a08 <HandleLeftTurn+0x1c>
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d053      	beq.n	8000ab0 <HandleLeftTurn+0xc4>

	if (left == 1 && CHECK_F_OR_R_VIDEO){
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d12a      	bne.n	8000a64 <HandleLeftTurn+0x78>
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <HandleLeftTurn+0xcc>)
 8000a10:	f993 3000 	ldrsb.w	r3, [r3]
 8000a14:	109b      	asrs	r3, r3, #2
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d109      	bne.n	8000a36 <HandleLeftTurn+0x4a>
 8000a22:	4b25      	ldr	r3, [pc, #148]	@ (8000ab8 <HandleLeftTurn+0xcc>)
 8000a24:	f993 3000 	ldrsb.w	r3, [r3]
 8000a28:	10db      	asrs	r3, r3, #3
 8000a2a:	b25b      	sxtb	r3, r3
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d016      	beq.n	8000a64 <HandleLeftTurn+0x78>
		if (left_turn == 0){
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <HandleLeftTurn+0xd0>)
 8000a38:	f993 3000 	ldrsb.w	r3, [r3]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d138      	bne.n	8000ab2 <HandleLeftTurn+0xc6>
			left_turn = 1;
 8000a40:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <HandleLeftTurn+0xd0>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
			SET_INDEX_BIT(parking_camera_state, LEFT_CAMERA_INDEX);
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <HandleLeftTurn+0xcc>)
 8000a48:	f993 3000 	ldrsb.w	r3, [r3]
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	b25a      	sxtb	r2, r3
 8000a52:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <HandleLeftTurn+0xcc>)
 8000a54:	701a      	strb	r2, [r3, #0]
			HandleCameraState(parking_camera_state);
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <HandleLeftTurn+0xcc>)
 8000a58:	f993 3000 	ldrsb.w	r3, [r3]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe0b 	bl	8000678 <HandleCameraState>
		if (left_turn == 0){
 8000a62:	e026      	b.n	8000ab2 <HandleLeftTurn+0xc6>
		}
	}
	else {
		if (left_turn == 1) {
 8000a64:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <HandleLeftTurn+0xd0>)
 8000a66:	f993 3000 	ldrsb.w	r3, [r3]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d121      	bne.n	8000ab2 <HandleLeftTurn+0xc6>
			left_turn = 0;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <HandleLeftTurn+0xd0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
			if (CHECK_F_R_VIDEO_OFF){
 8000a74:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <HandleLeftTurn+0xcc>)
 8000a76:	f993 3000 	ldrsb.w	r3, [r3]
 8000a7a:	109b      	asrs	r3, r3, #2
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d10c      	bne.n	8000aa2 <HandleLeftTurn+0xb6>
 8000a88:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <HandleLeftTurn+0xcc>)
 8000a8a:	f993 3000 	ldrsb.w	r3, [r3]
 8000a8e:	10db      	asrs	r3, r3, #3
 8000a90:	b25b      	sxtb	r3, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <HandleLeftTurn+0xb6>
				StopLeftTurn();
 8000a9c:	f7ff ff5c 	bl	8000958 <StopLeftTurn>
 8000aa0:	e007      	b.n	8000ab2 <HandleLeftTurn+0xc6>
			}
			else HandleLeftTurnCountdown(HAL_GetTick());
 8000aa2:	f000 ffad 	bl	8001a00 <HAL_GetTick>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff69 	bl	8000980 <HandleLeftTurnCountdown>
 8000aae:	e000      	b.n	8000ab2 <HandleLeftTurn+0xc6>
	if (left == 1 && right == 1) return;
 8000ab0:	bf00      	nop
		}
	}
}
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000195 	.word	0x20000195
 8000abc:	20000192 	.word	0x20000192

08000ac0 <HandleRearGear>:

void HandleRearGear(int8_t rear_gear)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
	if (rear_gear == 1 && !CHECK_BIT(parking_camera_state, REAR_CAMERA_INDEX)) {
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d11b      	bne.n	8000b0a <HandleRearGear+0x4a>
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <HandleRearGear+0x8c>)
 8000ad4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ad8:	10db      	asrs	r3, r3, #3
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d111      	bne.n	8000b0a <HandleRearGear+0x4a>
		SET_INDEX_BIT(parking_camera_state, REAR_CAMERA_INDEX);
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <HandleRearGear+0x8c>)
 8000ae8:	f993 3000 	ldrsb.w	r3, [r3]
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	b25a      	sxtb	r2, r3
 8000af2:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <HandleRearGear+0x8c>)
 8000af4:	701a      	strb	r2, [r3, #0]
		notification = 1;
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <HandleRearGear+0x90>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
		HandleCameraState(parking_camera_state);
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <HandleRearGear+0x8c>)
 8000afe:	f993 3000 	ldrsb.w	r3, [r3]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fdb8 	bl	8000678 <HandleCameraState>
	}
	else if (rear_gear == 0 && CHECK_BIT(parking_camera_state, REAR_CAMERA_INDEX)) {
		CLEAR_INDEX_BIT(parking_camera_state, REAR_CAMERA_INDEX);
		HandleCameraState(parking_camera_state);
	}
}
 8000b08:	e01b      	b.n	8000b42 <HandleRearGear+0x82>
	else if (rear_gear == 0 && CHECK_BIT(parking_camera_state, REAR_CAMERA_INDEX)) {
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d117      	bne.n	8000b42 <HandleRearGear+0x82>
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <HandleRearGear+0x8c>)
 8000b14:	f993 3000 	ldrsb.w	r3, [r3]
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d00d      	beq.n	8000b42 <HandleRearGear+0x82>
		CLEAR_INDEX_BIT(parking_camera_state, REAR_CAMERA_INDEX);
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <HandleRearGear+0x8c>)
 8000b28:	f993 3000 	ldrsb.w	r3, [r3]
 8000b2c:	f023 0308 	bic.w	r3, r3, #8
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HandleRearGear+0x8c>)
 8000b34:	701a      	strb	r2, [r3, #0]
		HandleCameraState(parking_camera_state);
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HandleRearGear+0x8c>)
 8000b38:	f993 3000 	ldrsb.w	r3, [r3]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fd9b 	bl	8000678 <HandleCameraState>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000195 	.word	0x20000195
 8000b50:	20000191 	.word	0x20000191

08000b54 <HandleFrontSpeed>:

void HandleFrontSpeed(uint32_t speed)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if (speed == 0){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d103      	bne.n	8000b6a <HandleFrontSpeed+0x16>
		 front_parking_radar = 0;
 8000b62:	4b28      	ldr	r3, [pc, #160]	@ (8000c04 <HandleFrontSpeed+0xb0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
		 return;
 8000b68:	e049      	b.n	8000bfe <HandleFrontSpeed+0xaa>
	}

	if (speed <= FRONT_SPEED_LIMIT){
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b05      	cmp	r3, #5
 8000b6e:	d823      	bhi.n	8000bb8 <HandleFrontSpeed+0x64>
		if (CHECK_BIT(parking_camera_state, FRONT_CAMERA_INDEX)) return;
 8000b70:	4b25      	ldr	r3, [pc, #148]	@ (8000c08 <HandleFrontSpeed+0xb4>)
 8000b72:	f993 3000 	ldrsb.w	r3, [r3]
 8000b76:	109b      	asrs	r3, r3, #2
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d13b      	bne.n	8000bfc <HandleFrontSpeed+0xa8>

		front_parking_radar = 1;
 8000b84:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <HandleFrontSpeed+0xb0>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
		if (enable_notification){
 8000b8a:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <HandleFrontSpeed+0xb8>)
 8000b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d034      	beq.n	8000bfe <HandleFrontSpeed+0xaa>
			if (front_min_distance * RADAR_DISTANCE_MULTIPLIER <= FRONT_DISTANCE_LIMIT){
 8000b94:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <HandleFrontSpeed+0xbc>)
 8000b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2b32      	cmp	r3, #50	@ 0x32
 8000ba6:	dc03      	bgt.n	8000bb0 <HandleFrontSpeed+0x5c>
				notification = 1;
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <HandleFrontSpeed+0xc0>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	e026      	b.n	8000bfe <HandleFrontSpeed+0xaa>
			} else {
				notification = 0;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <HandleFrontSpeed+0xc0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	e022      	b.n	8000bfe <HandleFrontSpeed+0xaa>
			}
		}
	} else {
		front_parking_radar = 0;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <HandleFrontSpeed+0xb0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
		notification = 0;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <HandleFrontSpeed+0xc0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
		if (CHECK_BIT(parking_camera_state, FRONT_CAMERA_INDEX)){
 8000bc4:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <HandleFrontSpeed+0xb4>)
 8000bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8000bca:	109b      	asrs	r3, r3, #2
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d012      	beq.n	8000bfe <HandleFrontSpeed+0xaa>
			CLEAR_INDEX_BIT(parking_camera_state, FRONT_CAMERA_INDEX);
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <HandleFrontSpeed+0xb4>)
 8000bda:	f993 3000 	ldrsb.w	r3, [r3]
 8000bde:	f023 0304 	bic.w	r3, r3, #4
 8000be2:	b25a      	sxtb	r2, r3
 8000be4:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <HandleFrontSpeed+0xb4>)
 8000be6:	701a      	strb	r2, [r3, #0]
			HandleCameraState(parking_camera_state);
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <HandleFrontSpeed+0xb4>)
 8000bea:	f993 3000 	ldrsb.w	r3, [r3]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fd42 	bl	8000678 <HandleCameraState>
			front_parking_radar = 0;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <HandleFrontSpeed+0xb0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e000      	b.n	8000bfe <HandleFrontSpeed+0xaa>
		if (CHECK_BIT(parking_camera_state, FRONT_CAMERA_INDEX)) return;
 8000bfc:	bf00      	nop
		}
	}
}
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000196 	.word	0x20000196
 8000c08:	20000195 	.word	0x20000195
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	20000000 	.word	0x20000000
 8000c14:	20000191 	.word	0x20000191

08000c18 <HandleParkingButton>:

void HandleParkingButton(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	static int32_t last_btn_pressed = 0;
	static int8_t button_processed = 0;

	if (HAL_GPIO_ReadPin(GPIOA, PARKING_BUTTON_PIN) == 0){
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	484c      	ldr	r0, [pc, #304]	@ (8000d50 <HandleParkingButton+0x138>)
 8000c20:	f001 ffca 	bl	8002bb8 <HAL_GPIO_ReadPin>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d140      	bne.n	8000cac <HandleParkingButton+0x94>
		if (button_processed) return;
 8000c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8000d54 <HandleParkingButton+0x13c>)
 8000c2c:	f993 3000 	ldrsb.w	r3, [r3]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f040 8089 	bne.w	8000d48 <HandleParkingButton+0x130>
		if (last_btn_pressed == 0) last_btn_pressed = HAL_GetTick();
 8000c36:	4b48      	ldr	r3, [pc, #288]	@ (8000d58 <HandleParkingButton+0x140>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d105      	bne.n	8000c4a <HandleParkingButton+0x32>
 8000c3e:	f000 fedf 	bl	8001a00 <HAL_GetTick>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b44      	ldr	r3, [pc, #272]	@ (8000d58 <HandleParkingButton+0x140>)
 8000c48:	601a      	str	r2, [r3, #0]
		if (HAL_GetTick() - last_btn_pressed >= PARKING_BUTTON_LONG_PRESS_TIME){
 8000c4a:	f000 fed9 	bl	8001a00 <HAL_GetTick>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a41      	ldr	r2, [pc, #260]	@ (8000d58 <HandleParkingButton+0x140>)
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	1a9b      	subs	r3, r3, r2
 8000c56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c5a:	d378      	bcc.n	8000d4e <HandleParkingButton+0x136>
			 if (front_parking_radar == 1 && notification == 1){
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d5c <HandleParkingButton+0x144>)
 8000c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d10b      	bne.n	8000c7e <HandleParkingButton+0x66>
 8000c66:	4b3e      	ldr	r3, [pc, #248]	@ (8000d60 <HandleParkingButton+0x148>)
 8000c68:	f993 3000 	ldrsb.w	r3, [r3]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d106      	bne.n	8000c7e <HandleParkingButton+0x66>
				 enable_notification = 0;
 8000c70:	4b3c      	ldr	r3, [pc, #240]	@ (8000d64 <HandleParkingButton+0x14c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
				 notification = 0;
 8000c76:	4b3a      	ldr	r3, [pc, #232]	@ (8000d60 <HandleParkingButton+0x148>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e00f      	b.n	8000c9e <HandleParkingButton+0x86>
			 }
			 else if (front_parking_radar == 1 && notification == 0) {
 8000c7e:	4b37      	ldr	r3, [pc, #220]	@ (8000d5c <HandleParkingButton+0x144>)
 8000c80:	f993 3000 	ldrsb.w	r3, [r3]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d10a      	bne.n	8000c9e <HandleParkingButton+0x86>
 8000c88:	4b35      	ldr	r3, [pc, #212]	@ (8000d60 <HandleParkingButton+0x148>)
 8000c8a:	f993 3000 	ldrsb.w	r3, [r3]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d105      	bne.n	8000c9e <HandleParkingButton+0x86>
				 enable_notification = 1;
 8000c92:	4b34      	ldr	r3, [pc, #208]	@ (8000d64 <HandleParkingButton+0x14c>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
				 notification = 1;
 8000c98:	4b31      	ldr	r3, [pc, #196]	@ (8000d60 <HandleParkingButton+0x148>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
			 }
			 last_btn_pressed = 0;
 8000c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d58 <HandleParkingButton+0x140>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
			 button_processed = 1;
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <HandleParkingButton+0x13c>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e050      	b.n	8000d4e <HandleParkingButton+0x136>
		}
	}
	else {
		if (button_processed) button_processed = 0;
 8000cac:	4b29      	ldr	r3, [pc, #164]	@ (8000d54 <HandleParkingButton+0x13c>)
 8000cae:	f993 3000 	ldrsb.w	r3, [r3]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <HandleParkingButton+0xa4>
 8000cb6:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <HandleParkingButton+0x13c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
		if (last_btn_pressed == 0) return;
 8000cbc:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <HandleParkingButton+0x140>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d043      	beq.n	8000d4c <HandleParkingButton+0x134>
		if (HAL_GetTick() - last_btn_pressed >= PARKING_BUTTON_SHORT_PRESS_TIME &&
 8000cc4:	f000 fe9c 	bl	8001a00 <HAL_GetTick>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4a23      	ldr	r2, [pc, #140]	@ (8000d58 <HandleParkingButton+0x140>)
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	1a9b      	subs	r3, r3, r2
 8000cd0:	2b09      	cmp	r3, #9
 8000cd2:	d935      	bls.n	8000d40 <HandleParkingButton+0x128>
				HAL_GetTick() - last_btn_pressed < PARKING_BUTTON_LONG_PRESS_TIME){
 8000cd4:	f000 fe94 	bl	8001a00 <HAL_GetTick>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4a1f      	ldr	r2, [pc, #124]	@ (8000d58 <HandleParkingButton+0x140>)
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	1a9b      	subs	r3, r3, r2
		if (HAL_GetTick() - last_btn_pressed >= PARKING_BUTTON_SHORT_PRESS_TIME &&
 8000ce0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ce4:	d22c      	bcs.n	8000d40 <HandleParkingButton+0x128>
			if (CHECK_BIT(parking_camera_state, FRONT_CAMERA_INDEX)){
 8000ce6:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <HandleParkingButton+0x150>)
 8000ce8:	f993 3000 	ldrsb.w	r3, [r3]
 8000cec:	109b      	asrs	r3, r3, #2
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d011      	beq.n	8000d1e <HandleParkingButton+0x106>
				CLEAR_INDEX_BIT(parking_camera_state, FRONT_CAMERA_INDEX);
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <HandleParkingButton+0x150>)
 8000cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8000d00:	f023 0304 	bic.w	r3, r3, #4
 8000d04:	b25a      	sxtb	r2, r3
 8000d06:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <HandleParkingButton+0x150>)
 8000d08:	701a      	strb	r2, [r3, #0]
				HandleCameraState(parking_camera_state);
 8000d0a:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <HandleParkingButton+0x150>)
 8000d0c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fcb1 	bl	8000678 <HandleCameraState>
				notification = 0;
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HandleParkingButton+0x148>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	e010      	b.n	8000d40 <HandleParkingButton+0x128>
			}
			else {
				SET_INDEX_BIT(parking_camera_state, FRONT_CAMERA_INDEX);
 8000d1e:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HandleParkingButton+0x150>)
 8000d20:	f993 3000 	ldrsb.w	r3, [r3]
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	b25a      	sxtb	r2, r3
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <HandleParkingButton+0x150>)
 8000d2c:	701a      	strb	r2, [r3, #0]
				HandleCameraState(parking_camera_state);
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <HandleParkingButton+0x150>)
 8000d30:	f993 3000 	ldrsb.w	r3, [r3]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fc9f 	bl	8000678 <HandleCameraState>
				notification = 1;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <HandleParkingButton+0x148>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
			}
		}
		last_btn_pressed = 0;
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HandleParkingButton+0x140>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	e002      	b.n	8000d4e <HandleParkingButton+0x136>
		if (button_processed) return;
 8000d48:	bf00      	nop
 8000d4a:	e000      	b.n	8000d4e <HandleParkingButton+0x136>
		if (last_btn_pressed == 0) return;
 8000d4c:	bf00      	nop
	}
}
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40010800 	.word	0x40010800
 8000d54:	200001cc 	.word	0x200001cc
 8000d58:	200001d0 	.word	0x200001d0
 8000d5c:	20000196 	.word	0x20000196
 8000d60:	20000191 	.word	0x20000191
 8000d64:	20000004 	.word	0x20000004
 8000d68:	20000195 	.word	0x20000195

08000d6c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	if (!CHECK_RADAR_ON) return;
 8000d74:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000d76:	f993 3000 	ldrsb.w	r3, [r3]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d104      	bne.n	8000d88 <HAL_TIM_IC_CaptureCallback+0x1c>
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000d80:	f993 3000 	ldrsb.w	r3, [r3]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d018      	beq.n	8000dba <HAL_TIM_IC_CaptureCallback+0x4e>


	if(htim -> Instance == TIM3 && htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000dcc <HAL_TIM_IC_CaptureCallback+0x60>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d106      	bne.n	8000da0 <HAL_TIM_IC_CaptureCallback+0x34>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7f1b      	ldrb	r3, [r3, #28]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d102      	bne.n	8000da0 <HAL_TIM_IC_CaptureCallback+0x34>
	{
		HandleRearRadarPulses(htim);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fa56 	bl	800024c <HandleRearRadarPulses>
	}
	if(htim -> Instance == TIM2 && htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000da8:	d108      	bne.n	8000dbc <HAL_TIM_IC_CaptureCallback+0x50>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	7f1b      	ldrb	r3, [r3, #28]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d104      	bne.n	8000dbc <HAL_TIM_IC_CaptureCallback+0x50>
	{
		HandleFrontRadarPulses(htim);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff f9ca 	bl	800014c <HandleFrontRadarPulses>
 8000db8:	e000      	b.n	8000dbc <HAL_TIM_IC_CaptureCallback+0x50>
	if (!CHECK_RADAR_ON) return;
 8000dba:	bf00      	nop
	}
}
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000195 	.word	0x20000195
 8000dc8:	20000196 	.word	0x20000196
 8000dcc:	40000400 	.word	0x40000400

08000dd0 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	static	uint32_t	 start_time = 0;

	if (htim->Instance == TIM4 && CHECK_RADAR_ON){
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8000e5c <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d138      	bne.n	8000e54 <HAL_TIM_OC_DelayElapsedCallback+0x84>
 8000de2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8000de4:	f993 3000 	ldrsb.w	r3, [r3]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d104      	bne.n	8000df6 <HAL_TIM_OC_DelayElapsedCallback+0x26>
 8000dec:	4b1d      	ldr	r3, [pc, #116]	@ (8000e64 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8000dee:	f993 3000 	ldrsb.w	r3, [r3]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d02e      	beq.n	8000e54 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7f1b      	ldrb	r3, [r3, #28]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d101      	bne.n	8000e02 <HAL_TIM_OC_DelayElapsedCallback+0x32>
		{
			SendRearParkingSound(); // 90 mS
 8000dfe:	f7ff fbb9 	bl	8000574 <SendRearParkingSound>
		}
		if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7f1b      	ldrb	r3, [r3, #28]
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d101      	bne.n	8000e0e <HAL_TIM_OC_DelayElapsedCallback+0x3e>
		{
			SendFrontParkingSound(); // 50 mS
 8000e0a:	f7ff fb31 	bl	8000470 <SendFrontParkingSound>
		}
		if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7f1b      	ldrb	r3, [r3, #28]
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	d11e      	bne.n	8000e54 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		{

			if (send_can_status) can_send_sensors(); // 100 mS
 8000e16:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8000e18:	f993 3000 	ldrsb.w	r3, [r3]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <HAL_TIM_OC_DelayElapsedCallback+0x56>
 8000e20:	f7ff fa94 	bl	800034c <can_send_sensors>
					start_time = 0;
				}
			}
		}
	}
}
 8000e24:	e016      	b.n	8000e54 <HAL_TIM_OC_DelayElapsedCallback+0x84>
				if (start_time == 0) start_time = HAL_GetTick();
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d104      	bne.n	8000e38 <HAL_TIM_OC_DelayElapsedCallback+0x68>
 8000e2e:	f000 fde7 	bl	8001a00 <HAL_GetTick>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000e36:	6013      	str	r3, [r2, #0]
				if (HAL_GetTick() - start_time > CAN_SEND_START_TIMEOUT) {
 8000e38:	f000 fde2 	bl	8001a00 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2bc8      	cmp	r3, #200	@ 0xc8
 8000e46:	d905      	bls.n	8000e54 <HAL_TIM_OC_DelayElapsedCallback+0x84>
					send_can_status = 1;
 8000e48:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
					start_time = 0;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40000800 	.word	0x40000800
 8000e60:	20000195 	.word	0x20000195
 8000e64:	20000196 	.word	0x20000196
 8000e68:	20000194 	.word	0x20000194
 8000e6c:	200001d4 	.word	0x200001d4

08000e70 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 8000e78:	4b3a      	ldr	r3, [pc, #232]	@ (8000f64 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000e7a:	4a3b      	ldr	r2, [pc, #236]	@ (8000f68 <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f001 f89f 	bl	8001fc2 <HAL_CAN_GetRxMessage>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
	{
		/* Reception Error */
		Error_Handler();
 8000e8a:	f000 fbab 	bl	80015e4 <Error_Handler>
	}

	if (RxHeader.IDE != CAN_ID_STD || RxHeader.DLC != CAN_DATA_LENGTH) return;
 8000e8e:	4b36      	ldr	r3, [pc, #216]	@ (8000f68 <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d15e      	bne.n	8000f54 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>
 8000e96:	4b34      	ldr	r3, [pc, #208]	@ (8000f68 <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d15a      	bne.n	8000f54 <HAL_CAN_RxFifo1MsgPendingCallback+0xe4>

	switch(RxHeader.StdId)
 8000e9e:	4b32      	ldr	r3, [pc, #200]	@ (8000f68 <HAL_CAN_RxFifo1MsgPendingCallback+0xf8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 8000ea6:	d009      	beq.n	8000ebc <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
 8000ea8:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 8000eac:	d857      	bhi.n	8000f5e <HAL_CAN_RxFifo1MsgPendingCallback+0xee>
 8000eae:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8000eb2:	d040      	beq.n	8000f36 <HAL_CAN_RxFifo1MsgPendingCallback+0xc6>
 8000eb4:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 8000eb8:	d02d      	beq.n	8000f16 <HAL_CAN_RxFifo1MsgPendingCallback+0xa6>
 8000eba:	e050      	b.n	8000f5e <HAL_CAN_RxFifo1MsgPendingCallback+0xee>
	{
	case CAN_TURN_LIGHT_FRAME_ID:
	{
		if (CHECK_BIT(RxData[0], 7)){
 8000ebc:	4b29      	ldr	r3, [pc, #164]	@ (8000f64 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	09db      	lsrs	r3, r3, #7
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d045      	beq.n	8000f58 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>
			HandleRightTurn(CHECK_BIT(RxData[2], 5), CHECK_BIT(RxData[2], 6));
 8000ecc:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	095b      	lsrs	r3, r3, #5
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b22      	ldr	r3, [pc, #136]	@ (8000f64 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000edc:	789b      	ldrb	r3, [r3, #2]
 8000ede:	099b      	lsrs	r3, r3, #6
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4610      	mov	r0, r2
 8000eec:	f7ff fcca 	bl	8000884 <HandleRightTurn>
			HandleLeftTurn(CHECK_BIT(RxData[2], 5), CHECK_BIT(RxData[2], 6));
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000ef2:	789b      	ldrb	r3, [r3, #2]
 8000ef4:	095b      	lsrs	r3, r3, #5
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000f00:	789b      	ldrb	r3, [r3, #2]
 8000f02:	099b      	lsrs	r3, r3, #6
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4610      	mov	r0, r2
 8000f10:	f7ff fd6c 	bl	80009ec <HandleLeftTurn>
		}
	}
	break;
 8000f14:	e020      	b.n	8000f58 <HAL_CAN_RxFifo1MsgPendingCallback+0xe8>
	case CAN_SPEED_RPM_FRAME_ID:
	{
		HandleFrontSpeed((((uint16_t)RxData[3] << 8) | (uint8_t)RxData[4]) / 10);
 8000f16:	4b13      	ldr	r3, [pc, #76]	@ (8000f64 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000f18:	78db      	ldrb	r3, [r3, #3]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	4a11      	ldr	r2, [pc, #68]	@ (8000f64 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000f1e:	7912      	ldrb	r2, [r2, #4]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <HAL_CAN_RxFifo1MsgPendingCallback+0xfc>)
 8000f24:	fb82 1203 	smull	r1, r2, r2, r3
 8000f28:	1092      	asrs	r2, r2, #2
 8000f2a:	17db      	asrs	r3, r3, #31
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fe10 	bl	8000b54 <HandleFrontSpeed>
	}
	break;
 8000f34:	e013      	b.n	8000f5e <HAL_CAN_RxFifo1MsgPendingCallback+0xee>
	case CAN_REVERSE_GEAR_FRAME_ID:
	{
		if (RxData[1] == 0x02) // Rear gear selected
 8000f36:	4b0b      	ldr	r3, [pc, #44]	@ (8000f64 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000f38:	785b      	ldrb	r3, [r3, #1]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d102      	bne.n	8000f44 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
		{
			HandleRearGear(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f7ff fdbe 	bl	8000ac0 <HandleRearGear>
		}
		if (RxData[1] == 0xff) // Rear gear cleared
 8000f44:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <HAL_CAN_RxFifo1MsgPendingCallback+0xf4>)
 8000f46:	785b      	ldrb	r3, [r3, #1]
 8000f48:	2bff      	cmp	r3, #255	@ 0xff
 8000f4a:	d107      	bne.n	8000f5c <HAL_CAN_RxFifo1MsgPendingCallback+0xec>
		{
			HandleRearGear(0);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fdb7 	bl	8000ac0 <HandleRearGear>
		}
	}
	break;
 8000f52:	e003      	b.n	8000f5c <HAL_CAN_RxFifo1MsgPendingCallback+0xec>
	if (RxHeader.IDE != CAN_ID_STD || RxHeader.DLC != CAN_DATA_LENGTH) return;
 8000f54:	bf00      	nop
 8000f56:	e002      	b.n	8000f5e <HAL_CAN_RxFifo1MsgPendingCallback+0xee>
	break;
 8000f58:	bf00      	nop
 8000f5a:	e000      	b.n	8000f5e <HAL_CAN_RxFifo1MsgPendingCallback+0xee>
	break;
 8000f5c:	bf00      	nop
	}
}
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000164 	.word	0x20000164
 8000f68:	20000148 	.word	0x20000148
 8000f6c:	66666667 	.word	0x66666667

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f74:	f000 fcec 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f78:	f000 f816 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7c:	f000 fac8 	bl	8001510 <MX_GPIO_Init>
  MX_CAN_Init();
 8000f80:	f000 f858 	bl	8001034 <MX_CAN_Init>
  MX_TIM2_Init();
 8000f84:	f000 f8e2 	bl	800114c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f88:	f000 fa22 	bl	80013d0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000f8c:	f000 f97e 	bl	800128c <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HandleRadarState();
 8000f90:	f7ff fc0e 	bl	80007b0 <HandleRadarState>
	  HandleParkingButton();
 8000f94:	f7ff fe40 	bl	8000c18 <HandleParkingButton>
	  HandleLeftTurnCountdown(0);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff fcf1 	bl	8000980 <HandleLeftTurnCountdown>
	  HandleRightTurnCountdown(0);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fc3c 	bl	800081c <HandleRightTurnCountdown>
	  HandleRadarState();
 8000fa4:	bf00      	nop
 8000fa6:	e7f3      	b.n	8000f90 <main+0x20>

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b090      	sub	sp, #64	@ 0x40
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	2228      	movs	r2, #40	@ 0x28
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fd1a 	bl	80049f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fe6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fe11 	bl	8002c18 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ffc:	f000 faf2 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001004:	2302      	movs	r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800100c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001010:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2102      	movs	r1, #2
 800101a:	4618      	mov	r0, r3
 800101c:	f002 f87e 	bl	800311c <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001026:	f000 fadd 	bl	80015e4 <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3740      	adds	r7, #64	@ 0x40
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800103a:	4b41      	ldr	r3, [pc, #260]	@ (8001140 <MX_CAN_Init+0x10c>)
 800103c:	4a41      	ldr	r2, [pc, #260]	@ (8001144 <MX_CAN_Init+0x110>)
 800103e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 54;
 8001040:	4b3f      	ldr	r3, [pc, #252]	@ (8001140 <MX_CAN_Init+0x10c>)
 8001042:	2236      	movs	r2, #54	@ 0x36
 8001044:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001046:	4b3e      	ldr	r3, [pc, #248]	@ (8001140 <MX_CAN_Init+0x10c>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800104c:	4b3c      	ldr	r3, [pc, #240]	@ (8001140 <MX_CAN_Init+0x10c>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001052:	4b3b      	ldr	r3, [pc, #236]	@ (8001140 <MX_CAN_Init+0x10c>)
 8001054:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8001058:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800105a:	4b39      	ldr	r3, [pc, #228]	@ (8001140 <MX_CAN_Init+0x10c>)
 800105c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001060:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001062:	4b37      	ldr	r3, [pc, #220]	@ (8001140 <MX_CAN_Init+0x10c>)
 8001064:	2200      	movs	r2, #0
 8001066:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001068:	4b35      	ldr	r3, [pc, #212]	@ (8001140 <MX_CAN_Init+0x10c>)
 800106a:	2200      	movs	r2, #0
 800106c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 800106e:	4b34      	ldr	r3, [pc, #208]	@ (8001140 <MX_CAN_Init+0x10c>)
 8001070:	2201      	movs	r2, #1
 8001072:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001074:	4b32      	ldr	r3, [pc, #200]	@ (8001140 <MX_CAN_Init+0x10c>)
 8001076:	2200      	movs	r2, #0
 8001078:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800107a:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <MX_CAN_Init+0x10c>)
 800107c:	2200      	movs	r2, #0
 800107e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001080:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <MX_CAN_Init+0x10c>)
 8001082:	2200      	movs	r2, #0
 8001084:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001086:	482e      	ldr	r0, [pc, #184]	@ (8001140 <MX_CAN_Init+0x10c>)
 8001088:	f000 fcc4 	bl	8001a14 <HAL_CAN_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001092:	f000 faa7 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* Configure the CAN Filter */
   sFilterConfig.FilterBank = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
   sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
   sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
   sFilterConfig.FilterIdHigh = 0x460<<5;
 80010a2:	f44f 430c 	mov.w	r3, #35840	@ 0x8c00
 80010a6:	603b      	str	r3, [r7, #0]
   sFilterConfig.FilterIdLow = 0x280<<5;
 80010a8:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80010ac:	607b      	str	r3, [r7, #4]
   sFilterConfig.FilterMaskIdHigh = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
   sFilterConfig.FilterMaskIdLow = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
   sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	613b      	str	r3, [r7, #16]
   sFilterConfig.FilterActivation = ENABLE;
 80010ba:	2301      	movs	r3, #1
 80010bc:	623b      	str	r3, [r7, #32]
   sFilterConfig.SlaveStartFilterBank = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24

   if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	481e      	ldr	r0, [pc, #120]	@ (8001140 <MX_CAN_Init+0x10c>)
 80010c8:	f000 fd9f 	bl	8001c0a <HAL_CAN_ConfigFilter>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_CAN_Init+0xa2>
		/* Filter configuration Error */
		Error_Handler();
 80010d2:	f000 fa87 	bl	80015e4 <Error_Handler>
   }

   sFilterConfig.FilterBank = 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
   sFilterConfig.FilterIdHigh = 0x4a0<<5;
 80010da:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 80010de:	603b      	str	r3, [r7, #0]
   sFilterConfig.FilterIdLow = 0x430<<5;
 80010e0:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 80010e4:	607b      	str	r3, [r7, #4]
   sFilterConfig.FilterMaskIdHigh = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
   sFilterConfig.FilterMaskIdLow = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]

   if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80010ee:	463b      	mov	r3, r7
 80010f0:	4619      	mov	r1, r3
 80010f2:	4813      	ldr	r0, [pc, #76]	@ (8001140 <MX_CAN_Init+0x10c>)
 80010f4:	f000 fd89 	bl	8001c0a <HAL_CAN_ConfigFilter>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_CAN_Init+0xce>
		/* Filter configuration Error */
		Error_Handler();
 80010fe:	f000 fa71 	bl	80015e4 <Error_Handler>
   }


  /* Start the CAN peripheral */
   if (HAL_CAN_Start(&hcan) != HAL_OK)
 8001102:	480f      	ldr	r0, [pc, #60]	@ (8001140 <MX_CAN_Init+0x10c>)
 8001104:	f000 fe4a 	bl	8001d9c <HAL_CAN_Start>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_CAN_Init+0xde>
   {
     /* Start Error */
     Error_Handler();
 800110e:	f000 fa69 	bl	80015e4 <Error_Handler>
   }

   /* Activate CAN RX notification */
   if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001112:	2110      	movs	r1, #16
 8001114:	480a      	ldr	r0, [pc, #40]	@ (8001140 <MX_CAN_Init+0x10c>)
 8001116:	f001 f875 	bl	8002204 <HAL_CAN_ActivateNotification>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_CAN_Init+0xf0>
   {
	/* Notification Error */
	Error_Handler();
 8001120:	f000 fa60 	bl	80015e4 <Error_Handler>
   }
   /* Configure Transmission process */
   TxHeader.IDE = CAN_ID_STD;
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <MX_CAN_Init+0x114>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <MX_CAN_Init+0x114>)
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
   TxHeader.DLC = CAN_DATA_LENGTH;
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <MX_CAN_Init+0x114>)
 8001132:	2208      	movs	r2, #8
 8001134:	611a      	str	r2, [r3, #16]
  /* USER CODE END CAN_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3728      	adds	r7, #40	@ 0x28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000030 	.word	0x20000030
 8001144:	40006400 	.word	0x40006400
 8001148:	20000130 	.word	0x20000130

0800114c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b090      	sub	sp, #64	@ 0x40
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001152:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001186:	4b40      	ldr	r3, [pc, #256]	@ (8001288 <MX_TIM2_Init+0x13c>)
 8001188:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800118e:	4b3e      	ldr	r3, [pc, #248]	@ (8001288 <MX_TIM2_Init+0x13c>)
 8001190:	2247      	movs	r2, #71	@ 0x47
 8001192:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b3c      	ldr	r3, [pc, #240]	@ (8001288 <MX_TIM2_Init+0x13c>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800119a:	4b3b      	ldr	r3, [pc, #236]	@ (8001288 <MX_TIM2_Init+0x13c>)
 800119c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a2:	4b39      	ldr	r3, [pc, #228]	@ (8001288 <MX_TIM2_Init+0x13c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b37      	ldr	r3, [pc, #220]	@ (8001288 <MX_TIM2_Init+0x13c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ae:	4836      	ldr	r0, [pc, #216]	@ (8001288 <MX_TIM2_Init+0x13c>)
 80011b0:	f002 f910 	bl	80033d4 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011ba:	f000 fa13 	bl	80015e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011c8:	4619      	mov	r1, r3
 80011ca:	482f      	ldr	r0, [pc, #188]	@ (8001288 <MX_TIM2_Init+0x13c>)
 80011cc:	f002 fde6 	bl	8003d9c <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011d6:	f000 fa05 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011da:	482b      	ldr	r0, [pc, #172]	@ (8001288 <MX_TIM2_Init+0x13c>)
 80011dc:	f002 fa92 	bl	8003704 <HAL_TIM_IC_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80011e6:	f000 f9fd 	bl	80015e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80011ea:	2304      	movs	r3, #4
 80011ec:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80011ee:	2350      	movs	r3, #80	@ 0x50
 80011f0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4820      	ldr	r0, [pc, #128]	@ (8001288 <MX_TIM2_Init+0x13c>)
 8001206:	f002 fe90 	bl	8003f2a <HAL_TIM_SlaveConfigSynchro>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001210:	f000 f9e8 	bl	80015e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001218:	2301      	movs	r3, #1
 800121a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	4619      	mov	r1, r3
 800122c:	4816      	ldr	r0, [pc, #88]	@ (8001288 <MX_TIM2_Init+0x13c>)
 800122e:	f002 fd19 	bl	8003c64 <HAL_TIM_IC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001238:	f000 f9d4 	bl	80015e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800123c:	2302      	movs	r3, #2
 800123e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001240:	2302      	movs	r3, #2
 8001242:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2204      	movs	r2, #4
 800124a:	4619      	mov	r1, r3
 800124c:	480e      	ldr	r0, [pc, #56]	@ (8001288 <MX_TIM2_Init+0x13c>)
 800124e:	f002 fd09 	bl	8003c64 <HAL_TIM_IC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8001258:	f000 f9c4 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	@ (8001288 <MX_TIM2_Init+0x13c>)
 800126a:	f003 fb51 	bl	8004910 <HAL_TIMEx_MasterConfigSynchronization>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x12c>
  {
    Error_Handler();
 8001274:	f000 f9b6 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
//  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001278:	2104      	movs	r1, #4
 800127a:	4803      	ldr	r0, [pc, #12]	@ (8001288 <MX_TIM2_Init+0x13c>)
 800127c:	f002 fa9a 	bl	80037b4 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3740      	adds	r7, #64	@ 0x40
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000058 	.word	0x20000058

0800128c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b090      	sub	sp, #64	@ 0x40
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c6:	4b40      	ldr	r3, [pc, #256]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 80012c8:	4a40      	ldr	r2, [pc, #256]	@ (80013cc <MX_TIM3_Init+0x140>)
 80012ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80012cc:	4b3e      	ldr	r3, [pc, #248]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 80012ce:	2247      	movs	r2, #71	@ 0x47
 80012d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b3d      	ldr	r3, [pc, #244]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012d8:	4b3b      	ldr	r3, [pc, #236]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 80012da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b39      	ldr	r3, [pc, #228]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b38      	ldr	r3, [pc, #224]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012ec:	4836      	ldr	r0, [pc, #216]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 80012ee:	f002 f871 	bl	80033d4 <HAL_TIM_Base_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012f8:	f000 f974 	bl	80015e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001300:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001302:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001306:	4619      	mov	r1, r3
 8001308:	482f      	ldr	r0, [pc, #188]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 800130a:	f002 fd47 	bl	8003d9c <HAL_TIM_ConfigClockSource>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001314:	f000 f966 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001318:	482b      	ldr	r0, [pc, #172]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 800131a:	f002 f9f3 	bl	8003704 <HAL_TIM_IC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001324:	f000 f95e 	bl	80015e4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001328:	2304      	movs	r3, #4
 800132a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800132c:	2350      	movs	r3, #80	@ 0x50
 800132e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4821      	ldr	r0, [pc, #132]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 8001344:	f002 fdf1 	bl	8003f2a <HAL_TIM_SlaveConfigSynchro>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800134e:	f000 f949 	bl	80015e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001356:	2301      	movs	r3, #1
 8001358:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	2200      	movs	r2, #0
 8001368:	4619      	mov	r1, r3
 800136a:	4817      	ldr	r0, [pc, #92]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 800136c:	f002 fc7a 	bl	8003c64 <HAL_TIM_IC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001376:	f000 f935 	bl	80015e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800137a:	2302      	movs	r3, #2
 800137c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800137e:	2302      	movs	r3, #2
 8001380:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2204      	movs	r2, #4
 8001388:	4619      	mov	r1, r3
 800138a:	480f      	ldr	r0, [pc, #60]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 800138c:	f002 fc6a 	bl	8003c64 <HAL_TIM_IC_ConfigChannel>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8001396:	f000 f925 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4808      	ldr	r0, [pc, #32]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 80013a8:	f003 fab2 	bl	8004910 <HAL_TIMEx_MasterConfigSynchronization>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM3_Init+0x12a>
  {
    Error_Handler();
 80013b2:	f000 f917 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80013b6:	2104      	movs	r1, #4
 80013b8:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <MX_TIM3_Init+0x13c>)
 80013ba:	f002 f9fb 	bl	80037b4 <HAL_TIM_IC_Start_IT>
  /* USER CODE END TIM3_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3740      	adds	r7, #64	@ 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200000a0 	.word	0x200000a0
 80013cc:	40000400 	.word	0x40000400

080013d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	@ 0x38
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001400:	4b41      	ldr	r3, [pc, #260]	@ (8001508 <MX_TIM4_Init+0x138>)
 8001402:	4a42      	ldr	r2, [pc, #264]	@ (800150c <MX_TIM4_Init+0x13c>)
 8001404:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 8001406:	4b40      	ldr	r3, [pc, #256]	@ (8001508 <MX_TIM4_Init+0x138>)
 8001408:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800140c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	4b3e      	ldr	r3, [pc, #248]	@ (8001508 <MX_TIM4_Init+0x138>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001414:	4b3c      	ldr	r3, [pc, #240]	@ (8001508 <MX_TIM4_Init+0x138>)
 8001416:	f242 720f 	movw	r2, #9999	@ 0x270f
 800141a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141c:	4b3a      	ldr	r3, [pc, #232]	@ (8001508 <MX_TIM4_Init+0x138>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b39      	ldr	r3, [pc, #228]	@ (8001508 <MX_TIM4_Init+0x138>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001428:	4837      	ldr	r0, [pc, #220]	@ (8001508 <MX_TIM4_Init+0x138>)
 800142a:	f001 ffd3 	bl	80033d4 <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001434:	f000 f8d6 	bl	80015e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800143e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001442:	4619      	mov	r1, r3
 8001444:	4830      	ldr	r0, [pc, #192]	@ (8001508 <MX_TIM4_Init+0x138>)
 8001446:	f002 fca9 	bl	8003d9c <HAL_TIM_ConfigClockSource>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001450:	f000 f8c8 	bl	80015e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001454:	482c      	ldr	r0, [pc, #176]	@ (8001508 <MX_TIM4_Init+0x138>)
 8001456:	f002 f80c 	bl	8003472 <HAL_TIM_OC_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001460:	f000 f8c0 	bl	80015e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800146c:	f107 0320 	add.w	r3, r7, #32
 8001470:	4619      	mov	r1, r3
 8001472:	4825      	ldr	r0, [pc, #148]	@ (8001508 <MX_TIM4_Init+0x138>)
 8001474:	f003 fa4c 	bl	8004910 <HAL_TIMEx_MasterConfigSynchronization>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800147e:	f000 f8b1 	bl	80015e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001482:	2330      	movs	r3, #48	@ 0x30
 8001484:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 9000-1;
 8001486:	f242 3327 	movw	r3, #8999	@ 0x2327
 800148a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	481b      	ldr	r0, [pc, #108]	@ (8001508 <MX_TIM4_Init+0x138>)
 800149c:	f002 fb86 	bl	8003bac <HAL_TIM_OC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80014a6:	f000 f89d 	bl	80015e4 <Error_Handler>
  }
  sConfigOC.Pulse = 5000-1;
 80014aa:	f241 3387 	movw	r3, #4999	@ 0x1387
 80014ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2204      	movs	r2, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4814      	ldr	r0, [pc, #80]	@ (8001508 <MX_TIM4_Init+0x138>)
 80014b8:	f002 fb78 	bl	8003bac <HAL_TIM_OC_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 80014c2:	f000 f88f 	bl	80015e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000-1;
 80014ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80014ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2208      	movs	r2, #8
 80014d4:	4619      	mov	r1, r3
 80014d6:	480c      	ldr	r0, [pc, #48]	@ (8001508 <MX_TIM4_Init+0x138>)
 80014d8:	f002 fb68 	bl	8003bac <HAL_TIM_OC_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 80014e2:	f000 f87f 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80014e6:	2100      	movs	r1, #0
 80014e8:	4807      	ldr	r0, [pc, #28]	@ (8001508 <MX_TIM4_Init+0x138>)
 80014ea:	f002 f81b 	bl	8003524 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_2);
 80014ee:	2104      	movs	r1, #4
 80014f0:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_TIM4_Init+0x138>)
 80014f2:	f002 f817 	bl	8003524 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_3);
 80014f6:	2108      	movs	r1, #8
 80014f8:	4803      	ldr	r0, [pc, #12]	@ (8001508 <MX_TIM4_Init+0x138>)
 80014fa:	f002 f813 	bl	8003524 <HAL_TIM_OC_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3738      	adds	r7, #56	@ 0x38
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200000e8 	.word	0x200000e8
 800150c:	40000800 	.word	0x40000800

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001524:	4b2c      	ldr	r3, [pc, #176]	@ (80015d8 <MX_GPIO_Init+0xc8>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a2b      	ldr	r2, [pc, #172]	@ (80015d8 <MX_GPIO_Init+0xc8>)
 800152a:	f043 0320 	orr.w	r3, r3, #32
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b29      	ldr	r3, [pc, #164]	@ (80015d8 <MX_GPIO_Init+0xc8>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <MX_GPIO_Init+0xc8>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a25      	ldr	r2, [pc, #148]	@ (80015d8 <MX_GPIO_Init+0xc8>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b23      	ldr	r3, [pc, #140]	@ (80015d8 <MX_GPIO_Init+0xc8>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001554:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <MX_GPIO_Init+0xc8>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a1f      	ldr	r2, [pc, #124]	@ (80015d8 <MX_GPIO_Init+0xc8>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <MX_GPIO_Init+0xc8>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Parking_Radar_Pin|Right_Camera_Pin|Left_Camera_Pin|Front_Camera_Pin
 800156c:	2201      	movs	r2, #1
 800156e:	21bc      	movs	r1, #188	@ 0xbc
 8001570:	481a      	ldr	r0, [pc, #104]	@ (80015dc <MX_GPIO_Init+0xcc>)
 8001572:	f001 fb38 	bl	8002be6 <HAL_GPIO_WritePin>
                          |Rear_Camera_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Video_Output_GPIO_Port, Video_Output_Pin, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	2101      	movs	r1, #1
 800157a:	4819      	ldr	r0, [pc, #100]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 800157c:	f001 fb33 	bl	8002be6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Parking_Button_Pin */
  GPIO_InitStruct.Pin = Parking_Button_Pin;
 8001580:	2302      	movs	r3, #2
 8001582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001588:	2301      	movs	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Parking_Button_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4619      	mov	r1, r3
 8001592:	4812      	ldr	r0, [pc, #72]	@ (80015dc <MX_GPIO_Init+0xcc>)
 8001594:	f001 f98c 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Parking_Radar_Pin Right_Camera_Pin Left_Camera_Pin Front_Camera_Pin
                           Rear_Camera_Pin */
  GPIO_InitStruct.Pin = Parking_Radar_Pin|Right_Camera_Pin|Left_Camera_Pin|Front_Camera_Pin
 8001598:	23bc      	movs	r3, #188	@ 0xbc
 800159a:	613b      	str	r3, [r7, #16]
                          |Rear_Camera_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	480b      	ldr	r0, [pc, #44]	@ (80015dc <MX_GPIO_Init+0xcc>)
 80015b0:	f001 f97e 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Video_Output_Pin */
  GPIO_InitStruct.Pin = Video_Output_Pin;
 80015b4:	2301      	movs	r3, #1
 80015b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015bc:	2301      	movs	r3, #1
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2302      	movs	r3, #2
 80015c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Video_Output_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_GPIO_Init+0xd0>)
 80015cc:	f001 f970 	bl	80028b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015d0:	bf00      	nop
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010800 	.word	0x40010800
 80015e0:	40010c00 	.word	0x40010c00

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <Error_Handler+0x8>

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <HAL_MspInit+0x5c>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a14      	ldr	r2, [pc, #80]	@ (800164c <HAL_MspInit+0x5c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6193      	str	r3, [r2, #24]
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_MspInit+0x5c>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <HAL_MspInit+0x5c>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a0e      	ldr	r2, [pc, #56]	@ (800164c <HAL_MspInit+0x5c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <HAL_MspInit+0x5c>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001626:	4b0a      	ldr	r3, [pc, #40]	@ (8001650 <HAL_MspInit+0x60>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <HAL_MspInit+0x60>)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40021000 	.word	0x40021000
 8001650:	40010000 	.word	0x40010000

08001654 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a20      	ldr	r2, [pc, #128]	@ (80016f0 <HAL_CAN_MspInit+0x9c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d139      	bne.n	80016e8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001674:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <HAL_CAN_MspInit+0xa0>)
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	4a1e      	ldr	r2, [pc, #120]	@ (80016f4 <HAL_CAN_MspInit+0xa0>)
 800167a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800167e:	61d3      	str	r3, [r2, #28]
 8001680:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <HAL_CAN_MspInit+0xa0>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <HAL_CAN_MspInit+0xa0>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a18      	ldr	r2, [pc, #96]	@ (80016f4 <HAL_CAN_MspInit+0xa0>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <HAL_CAN_MspInit+0xa0>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	4619      	mov	r1, r3
 80016b8:	480f      	ldr	r0, [pc, #60]	@ (80016f8 <HAL_CAN_MspInit+0xa4>)
 80016ba:	f001 f8f9 	bl	80028b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	4809      	ldr	r0, [pc, #36]	@ (80016f8 <HAL_CAN_MspInit+0xa4>)
 80016d4:	f001 f8ec 	bl	80028b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2015      	movs	r0, #21
 80016de:	f001 f8b0 	bl	8002842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80016e2:	2015      	movs	r0, #21
 80016e4:	f001 f8c9 	bl	800287a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40006400 	.word	0x40006400
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010800 	.word	0x40010800

080016fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	@ 0x30
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800171a:	d13f      	bne.n	800179c <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171c:	4b47      	ldr	r3, [pc, #284]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	4a46      	ldr	r2, [pc, #280]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	61d3      	str	r3, [r2, #28]
 8001728:	4b44      	ldr	r3, [pc, #272]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	61bb      	str	r3, [r7, #24]
 8001732:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b41      	ldr	r3, [pc, #260]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a40      	ldr	r2, [pc, #256]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b3e      	ldr	r3, [pc, #248]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_Pin;
 800174c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001756:	2302      	movs	r3, #2
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM2_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	4619      	mov	r1, r3
 8001760:	4837      	ldr	r0, [pc, #220]	@ (8001840 <HAL_TIM_Base_MspInit+0x144>)
 8001762:	f001 f8a5 	bl	80028b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001766:	4b37      	ldr	r3, [pc, #220]	@ (8001844 <HAL_TIM_Base_MspInit+0x148>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800176c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800176e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001772:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001776:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800177a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800177c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001784:	4a2f      	ldr	r2, [pc, #188]	@ (8001844 <HAL_TIM_Base_MspInit+0x148>)
 8001786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001788:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	201c      	movs	r0, #28
 8001790:	f001 f857 	bl	8002842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001794:	201c      	movs	r0, #28
 8001796:	f001 f870 	bl	800287a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800179a:	e04a      	b.n	8001832 <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM3)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a29      	ldr	r2, [pc, #164]	@ (8001848 <HAL_TIM_Base_MspInit+0x14c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d12c      	bne.n	8001800 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017a6:	4b25      	ldr	r3, [pc, #148]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a24      	ldr	r2, [pc, #144]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b22      	ldr	r3, [pc, #136]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	4a1e      	ldr	r2, [pc, #120]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6193      	str	r3, [r2, #24]
 80017ca:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d6:	2340      	movs	r3, #64	@ 0x40
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	4815      	ldr	r0, [pc, #84]	@ (8001840 <HAL_TIM_Base_MspInit+0x144>)
 80017ea:	f001 f861 	bl	80028b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	201d      	movs	r0, #29
 80017f4:	f001 f825 	bl	8002842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017f8:	201d      	movs	r0, #29
 80017fa:	f001 f83e 	bl	800287a <HAL_NVIC_EnableIRQ>
}
 80017fe:	e018      	b.n	8001832 <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM4)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a11      	ldr	r2, [pc, #68]	@ (800184c <HAL_TIM_Base_MspInit+0x150>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d113      	bne.n	8001832 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a0b      	ldr	r2, [pc, #44]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_TIM_Base_MspInit+0x140>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	201e      	movs	r0, #30
 8001828:	f001 f80b 	bl	8002842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800182c:	201e      	movs	r0, #30
 800182e:	f001 f824 	bl	800287a <HAL_NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3730      	adds	r7, #48	@ 0x30
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	40010800 	.word	0x40010800
 8001844:	40010000 	.word	0x40010000
 8001848:	40000400 	.word	0x40000400
 800184c:	40000800 	.word	0x40000800

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <NMI_Handler+0x4>

08001858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <MemManage_Handler+0x4>

08001868 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <UsageFault_Handler+0x4>

08001878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a0:	f000 f89c 	bl	80019dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <CAN1_RX1_IRQHandler+0x10>)
 80018ae:	f000 fcce 	bl	800224e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000030 	.word	0x20000030

080018bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <TIM2_IRQHandler+0x10>)
 80018c2:	f002 f883 	bl	80039cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000058 	.word	0x20000058

080018d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <TIM3_IRQHandler+0x10>)
 80018d6:	f002 f879 	bl	80039cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200000a0 	.word	0x200000a0

080018e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <TIM4_IRQHandler+0x10>)
 80018ea:	f002 f86f 	bl	80039cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200000e8 	.word	0x200000e8

080018f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001904:	f7ff fff8 	bl	80018f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001908:	480b      	ldr	r0, [pc, #44]	@ (8001938 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800190a:	490c      	ldr	r1, [pc, #48]	@ (800193c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800190c:	4a0c      	ldr	r2, [pc, #48]	@ (8001940 <LoopFillZerobss+0x16>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a09      	ldr	r2, [pc, #36]	@ (8001944 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001920:	4c09      	ldr	r4, [pc, #36]	@ (8001948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192e:	f003 f867 	bl	8004a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001932:	f7ff fb1d 	bl	8000f70 <main>
  bx lr
 8001936:	4770      	bx	lr
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001940:	08004a8c 	.word	0x08004a8c
  ldr r2, =_sbss
 8001944:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001948:	200001dc 	.word	0x200001dc

0800194c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC1_2_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_Init+0x28>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a07      	ldr	r2, [pc, #28]	@ (8001978 <HAL_Init+0x28>)
 800195a:	f043 0310 	orr.w	r3, r3, #16
 800195e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001960:	2003      	movs	r0, #3
 8001962:	f000 ff63 	bl	800282c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001966:	200f      	movs	r0, #15
 8001968:	f000 f808 	bl	800197c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800196c:	f7ff fe40 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40022000 	.word	0x40022000

0800197c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_InitTick+0x54>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_InitTick+0x58>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001992:	fbb3 f3f1 	udiv	r3, r3, r1
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f000 ff7b 	bl	8002896 <HAL_SYSTICK_Config>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00e      	b.n	80019c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b0f      	cmp	r3, #15
 80019ae:	d80a      	bhi.n	80019c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b0:	2200      	movs	r2, #0
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f000 ff43 	bl	8002842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019bc:	4a06      	ldr	r2, [pc, #24]	@ (80019d8 <HAL_InitTick+0x5c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000008 	.word	0x20000008
 80019d4:	20000010 	.word	0x20000010
 80019d8:	2000000c 	.word	0x2000000c

080019dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_IncTick+0x1c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <HAL_IncTick+0x20>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a03      	ldr	r2, [pc, #12]	@ (80019fc <HAL_IncTick+0x20>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	20000010 	.word	0x20000010
 80019fc:	200001d8 	.word	0x200001d8

08001a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b02      	ldr	r3, [pc, #8]	@ (8001a10 <HAL_GetTick+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	200001d8 	.word	0x200001d8

08001a14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0ed      	b.n	8001c02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff fe0e 	bl	8001654 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a48:	f7ff ffda 	bl	8001a00 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a4e:	e012      	b.n	8001a76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a50:	f7ff ffd6 	bl	8001a00 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b0a      	cmp	r3, #10
 8001a5c:	d90b      	bls.n	8001a76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0c5      	b.n	8001c02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0e5      	beq.n	8001a50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0202 	bic.w	r2, r2, #2
 8001a92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a94:	f7ff ffb4 	bl	8001a00 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a9a:	e012      	b.n	8001ac2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a9c:	f7ff ffb0 	bl	8001a00 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b0a      	cmp	r3, #10
 8001aa8:	d90b      	bls.n	8001ac2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2205      	movs	r2, #5
 8001aba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e09f      	b.n	8001c02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1e5      	bne.n	8001a9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7e1b      	ldrb	r3, [r3, #24]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d108      	bne.n	8001aea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e007      	b.n	8001afa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7e5b      	ldrb	r3, [r3, #25]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d108      	bne.n	8001b14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	e007      	b.n	8001b24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7e9b      	ldrb	r3, [r3, #26]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d108      	bne.n	8001b3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0220 	orr.w	r2, r2, #32
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	e007      	b.n	8001b4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0220 	bic.w	r2, r2, #32
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7edb      	ldrb	r3, [r3, #27]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d108      	bne.n	8001b68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0210 	bic.w	r2, r2, #16
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e007      	b.n	8001b78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0210 	orr.w	r2, r2, #16
 8001b76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7f1b      	ldrb	r3, [r3, #28]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d108      	bne.n	8001b92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0208 	orr.w	r2, r2, #8
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e007      	b.n	8001ba2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0208 	bic.w	r2, r2, #8
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7f5b      	ldrb	r3, [r3, #29]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d108      	bne.n	8001bbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0204 	orr.w	r2, r2, #4
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	e007      	b.n	8001bcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0204 	bic.w	r2, r2, #4
 8001bca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	ea42 0103 	orr.w	r1, r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	1e5a      	subs	r2, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b087      	sub	sp, #28
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c20:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c22:	7cfb      	ldrb	r3, [r7, #19]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d003      	beq.n	8001c30 <HAL_CAN_ConfigFilter+0x26>
 8001c28:	7cfb      	ldrb	r3, [r7, #19]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	f040 80aa 	bne.w	8001d84 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2201      	movs	r2, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d123      	bne.n	8001cb2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	401a      	ands	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3248      	adds	r2, #72	@ 0x48
 8001c92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ca6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ca8:	6979      	ldr	r1, [r7, #20]
 8001caa:	3348      	adds	r3, #72	@ 0x48
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d122      	bne.n	8001d00 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3248      	adds	r2, #72	@ 0x48
 8001ce0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cf4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001cf6:	6979      	ldr	r1, [r7, #20]
 8001cf8:	3348      	adds	r3, #72	@ 0x48
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	440b      	add	r3, r1
 8001cfe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d1a:	e007      	b.n	8001d2c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001d46:	e007      	b.n	8001d58 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d76:	f023 0201 	bic.w	r2, r3, #1
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e006      	b.n	8001d92 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d12e      	bne.n	8001e0e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0201 	bic.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dc8:	f7ff fe1a 	bl	8001a00 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dce:	e012      	b.n	8001df6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dd0:	f7ff fe16 	bl	8001a00 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b0a      	cmp	r3, #10
 8001ddc:	d90b      	bls.n	8001df6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2205      	movs	r2, #5
 8001dee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e012      	b.n	8001e1c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1e5      	bne.n	8001dd0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e006      	b.n	8001e1c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e12:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
  }
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e38:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d003      	beq.n	8001e50 <HAL_CAN_AddTxMessage+0x2c>
 8001e48:	7ffb      	ldrb	r3, [r7, #31]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	f040 80ad 	bne.w	8001faa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10a      	bne.n	8001e70 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8095 	beq.w	8001f9a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	0e1b      	lsrs	r3, r3, #24
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10d      	bne.n	8001ea8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	6809      	ldr	r1, [r1, #0]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	440b      	add	r3, r1
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e00f      	b.n	8001ec8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eb2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001eb8:	68f9      	ldr	r1, [r7, #12]
 8001eba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ebc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3318      	adds	r3, #24
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	440b      	add	r3, r1
 8001ec6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3318      	adds	r3, #24
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3304      	adds	r3, #4
 8001eda:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	7d1b      	ldrb	r3, [r3, #20]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d111      	bne.n	8001f08 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3318      	adds	r3, #24
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	4413      	add	r3, r2
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	6811      	ldr	r1, [r2, #0]
 8001ef8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3318      	adds	r3, #24
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	440b      	add	r3, r1
 8001f04:	3304      	adds	r3, #4
 8001f06:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3307      	adds	r3, #7
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	061a      	lsls	r2, r3, #24
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3306      	adds	r3, #6
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	041b      	lsls	r3, r3, #16
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3305      	adds	r3, #5
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	4313      	orrs	r3, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	3204      	adds	r2, #4
 8001f28:	7812      	ldrb	r2, [r2, #0]
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	6811      	ldr	r1, [r2, #0]
 8001f30:	ea43 0200 	orr.w	r2, r3, r0
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	440b      	add	r3, r1
 8001f3a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001f3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3303      	adds	r3, #3
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	061a      	lsls	r2, r3, #24
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3301      	adds	r3, #1
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	7812      	ldrb	r2, [r2, #0]
 8001f60:	4610      	mov	r0, r2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	6811      	ldr	r1, [r2, #0]
 8001f66:	ea43 0200 	orr.w	r2, r3, r0
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	440b      	add	r3, r1
 8001f70:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001f74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	3318      	adds	r3, #24
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	6811      	ldr	r1, [r2, #0]
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	3318      	adds	r3, #24
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	440b      	add	r3, r1
 8001f94:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e00e      	b.n	8001fb8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e006      	b.n	8001fb8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
  }
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3724      	adds	r7, #36	@ 0x24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d003      	beq.n	8001fe6 <HAL_CAN_GetRxMessage+0x24>
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	f040 8103 	bne.w	80021ec <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10e      	bne.n	800200a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d116      	bne.n	8002028 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0f7      	b.n	80021fa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0e8      	b.n	80021fa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	331b      	adds	r3, #27
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0204 	and.w	r2, r3, #4
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	331b      	adds	r3, #27
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	4413      	add	r3, r2
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0d5b      	lsrs	r3, r3, #21
 8002056:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e00b      	b.n	8002078 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	331b      	adds	r3, #27
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	08db      	lsrs	r3, r3, #3
 8002070:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	331b      	adds	r3, #27
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4413      	add	r3, r2
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0202 	and.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	331b      	adds	r3, #27
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	3304      	adds	r3, #4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2208      	movs	r2, #8
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	e00b      	b.n	80020c6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	331b      	adds	r3, #27
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	3304      	adds	r3, #4
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 020f 	and.w	r2, r3, #15
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	331b      	adds	r3, #27
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	4413      	add	r3, r2
 80020d2:	3304      	adds	r3, #4
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	331b      	adds	r3, #27
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	4413      	add	r3, r2
 80020ea:	3304      	adds	r3, #4
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	0c1b      	lsrs	r3, r3, #16
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	4413      	add	r3, r2
 8002100:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	4413      	add	r3, r2
 8002116:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0a1a      	lsrs	r2, r3, #8
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4413      	add	r3, r2
 8002130:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0c1a      	lsrs	r2, r3, #16
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	3302      	adds	r3, #2
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	4413      	add	r3, r2
 800214a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0e1a      	lsrs	r2, r3, #24
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	3303      	adds	r3, #3
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	4413      	add	r3, r2
 8002164:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	3304      	adds	r3, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	4413      	add	r3, r2
 800217c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	0a1a      	lsrs	r2, r3, #8
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	3305      	adds	r3, #5
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	4413      	add	r3, r2
 8002196:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0c1a      	lsrs	r2, r3, #16
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	3306      	adds	r3, #6
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0e1a      	lsrs	r2, r3, #24
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	3307      	adds	r3, #7
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d108      	bne.n	80021d8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0220 	orr.w	r2, r2, #32
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	e007      	b.n	80021e8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0220 	orr.w	r2, r2, #32
 80021e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	e006      	b.n	80021fa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
  }
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002214:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d002      	beq.n	8002222 <HAL_CAN_ActivateNotification+0x1e>
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d109      	bne.n	8002236 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6959      	ldr	r1, [r3, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e006      	b.n	8002244 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
  }
}
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b08a      	sub	sp, #40	@ 0x28
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d07c      	beq.n	800238e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d023      	beq.n	80022e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2201      	movs	r2, #1
 80022a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f983 	bl	80025bc <HAL_CAN_TxMailbox0CompleteCallback>
 80022b6:	e016      	b.n	80022e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ca:	e00c      	b.n	80022e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80022de:	e002      	b.n	80022e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f986 	bl	80025f2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d024      	beq.n	800233a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f962 	bl	80025ce <HAL_CAN_TxMailbox1CompleteCallback>
 800230a:	e016      	b.n	800233a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002312:	2b00      	cmp	r3, #0
 8002314:	d004      	beq.n	8002320 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
 800231e:	e00c      	b.n	800233a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002326:	2b00      	cmp	r3, #0
 8002328:	d004      	beq.n	8002334 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
 8002332:	e002      	b.n	800233a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f965 	bl	8002604 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d024      	beq.n	800238e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800234c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f941 	bl	80025e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800235e:	e016      	b.n	800238e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
 8002372:	e00c      	b.n	800238e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
 8002386:	e002      	b.n	800238e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f944 	bl	8002616 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00c      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2210      	movs	r2, #16
 80023b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00b      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d006      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2208      	movs	r2, #8
 80023cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f933 	bl	800263a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f91b 	bl	8002628 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00c      	beq.n	8002416 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2210      	movs	r2, #16
 8002414:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2208      	movs	r2, #8
 8002430:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f90a 	bl	800264c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7fe fd0d 	bl	8000e70 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d006      	beq.n	8002478 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2210      	movs	r2, #16
 8002470:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f8f3 	bl	800265e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2208      	movs	r2, #8
 8002492:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f8eb 	bl	8002670 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d07b      	beq.n	800259c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d072      	beq.n	8002594 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002508:	2b00      	cmp	r3, #0
 800250a:	d043      	beq.n	8002594 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002512:	2b00      	cmp	r3, #0
 8002514:	d03e      	beq.n	8002594 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800251c:	2b60      	cmp	r3, #96	@ 0x60
 800251e:	d02b      	beq.n	8002578 <HAL_CAN_IRQHandler+0x32a>
 8002520:	2b60      	cmp	r3, #96	@ 0x60
 8002522:	d82e      	bhi.n	8002582 <HAL_CAN_IRQHandler+0x334>
 8002524:	2b50      	cmp	r3, #80	@ 0x50
 8002526:	d022      	beq.n	800256e <HAL_CAN_IRQHandler+0x320>
 8002528:	2b50      	cmp	r3, #80	@ 0x50
 800252a:	d82a      	bhi.n	8002582 <HAL_CAN_IRQHandler+0x334>
 800252c:	2b40      	cmp	r3, #64	@ 0x40
 800252e:	d019      	beq.n	8002564 <HAL_CAN_IRQHandler+0x316>
 8002530:	2b40      	cmp	r3, #64	@ 0x40
 8002532:	d826      	bhi.n	8002582 <HAL_CAN_IRQHandler+0x334>
 8002534:	2b30      	cmp	r3, #48	@ 0x30
 8002536:	d010      	beq.n	800255a <HAL_CAN_IRQHandler+0x30c>
 8002538:	2b30      	cmp	r3, #48	@ 0x30
 800253a:	d822      	bhi.n	8002582 <HAL_CAN_IRQHandler+0x334>
 800253c:	2b10      	cmp	r3, #16
 800253e:	d002      	beq.n	8002546 <HAL_CAN_IRQHandler+0x2f8>
 8002540:	2b20      	cmp	r3, #32
 8002542:	d005      	beq.n	8002550 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002544:	e01d      	b.n	8002582 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	f043 0308 	orr.w	r3, r3, #8
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800254e:	e019      	b.n	8002584 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	f043 0310 	orr.w	r3, r3, #16
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002558:	e014      	b.n	8002584 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	f043 0320 	orr.w	r3, r3, #32
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002562:	e00f      	b.n	8002584 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800256c:	e00a      	b.n	8002584 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002576:	e005      	b.n	8002584 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002580:	e000      	b.n	8002584 <HAL_CAN_IRQHandler+0x336>
            break;
 8002582:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002592:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2204      	movs	r2, #4
 800259a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f867 	bl	8002682 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80025b4:	bf00      	nop
 80025b6:	3728      	adds	r7, #40	@ 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a4:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026b0:	4013      	ands	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c6:	4a04      	ldr	r2, [pc, #16]	@ (80026d8 <__NVIC_SetPriorityGrouping+0x44>)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	60d3      	str	r3, [r2, #12]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e0:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <__NVIC_GetPriorityGrouping+0x18>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	f003 0307 	and.w	r3, r3, #7
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	4603      	mov	r3, r0
 8002700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	2b00      	cmp	r3, #0
 8002708:	db0b      	blt.n	8002722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	f003 021f 	and.w	r2, r3, #31
 8002710:	4906      	ldr	r1, [pc, #24]	@ (800272c <__NVIC_EnableIRQ+0x34>)
 8002712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2001      	movs	r0, #1
 800271a:	fa00 f202 	lsl.w	r2, r0, r2
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100

08002730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	db0a      	blt.n	800275a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	490c      	ldr	r1, [pc, #48]	@ (800277c <__NVIC_SetPriority+0x4c>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	440b      	add	r3, r1
 8002754:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002758:	e00a      	b.n	8002770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4908      	ldr	r1, [pc, #32]	@ (8002780 <__NVIC_SetPriority+0x50>)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3b04      	subs	r3, #4
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	440b      	add	r3, r1
 800276e:	761a      	strb	r2, [r3, #24]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000e100 	.word	0xe000e100
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	@ 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f1c3 0307 	rsb	r3, r3, #7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	bf28      	it	cs
 80027a2:	2304      	movcs	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <NVIC_EncodePriority+0x30>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3b03      	subs	r3, #3
 80027b2:	e000      	b.n	80027b6 <NVIC_EncodePriority+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	4313      	orrs	r3, r2
         );
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	@ 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027f8:	d301      	bcc.n	80027fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fa:	2301      	movs	r3, #1
 80027fc:	e00f      	b.n	800281e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002828 <SysTick_Config+0x40>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002806:	210f      	movs	r1, #15
 8002808:	f04f 30ff 	mov.w	r0, #4294967295
 800280c:	f7ff ff90 	bl	8002730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002810:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <SysTick_Config+0x40>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002816:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <SysTick_Config+0x40>)
 8002818:	2207      	movs	r2, #7
 800281a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	e000e010 	.word	0xe000e010

0800282c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff ff2d 	bl	8002694 <__NVIC_SetPriorityGrouping>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002854:	f7ff ff42 	bl	80026dc <__NVIC_GetPriorityGrouping>
 8002858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	6978      	ldr	r0, [r7, #20]
 8002860:	f7ff ff90 	bl	8002784 <NVIC_EncodePriority>
 8002864:	4602      	mov	r2, r0
 8002866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ff5f 	bl	8002730 <__NVIC_SetPriority>
}
 8002872:	bf00      	nop
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff35 	bl	80026f8 <__NVIC_EnableIRQ>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ffa2 	bl	80027e8 <SysTick_Config>
 80028a4:	4603      	mov	r3, r0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b08b      	sub	sp, #44	@ 0x2c
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c2:	e169      	b.n	8002b98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028c4:	2201      	movs	r2, #1
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	429a      	cmp	r2, r3
 80028de:	f040 8158 	bne.w	8002b92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4a9a      	ldr	r2, [pc, #616]	@ (8002b50 <HAL_GPIO_Init+0x2a0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d05e      	beq.n	80029aa <HAL_GPIO_Init+0xfa>
 80028ec:	4a98      	ldr	r2, [pc, #608]	@ (8002b50 <HAL_GPIO_Init+0x2a0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d875      	bhi.n	80029de <HAL_GPIO_Init+0x12e>
 80028f2:	4a98      	ldr	r2, [pc, #608]	@ (8002b54 <HAL_GPIO_Init+0x2a4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d058      	beq.n	80029aa <HAL_GPIO_Init+0xfa>
 80028f8:	4a96      	ldr	r2, [pc, #600]	@ (8002b54 <HAL_GPIO_Init+0x2a4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d86f      	bhi.n	80029de <HAL_GPIO_Init+0x12e>
 80028fe:	4a96      	ldr	r2, [pc, #600]	@ (8002b58 <HAL_GPIO_Init+0x2a8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d052      	beq.n	80029aa <HAL_GPIO_Init+0xfa>
 8002904:	4a94      	ldr	r2, [pc, #592]	@ (8002b58 <HAL_GPIO_Init+0x2a8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d869      	bhi.n	80029de <HAL_GPIO_Init+0x12e>
 800290a:	4a94      	ldr	r2, [pc, #592]	@ (8002b5c <HAL_GPIO_Init+0x2ac>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d04c      	beq.n	80029aa <HAL_GPIO_Init+0xfa>
 8002910:	4a92      	ldr	r2, [pc, #584]	@ (8002b5c <HAL_GPIO_Init+0x2ac>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d863      	bhi.n	80029de <HAL_GPIO_Init+0x12e>
 8002916:	4a92      	ldr	r2, [pc, #584]	@ (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d046      	beq.n	80029aa <HAL_GPIO_Init+0xfa>
 800291c:	4a90      	ldr	r2, [pc, #576]	@ (8002b60 <HAL_GPIO_Init+0x2b0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d85d      	bhi.n	80029de <HAL_GPIO_Init+0x12e>
 8002922:	2b12      	cmp	r3, #18
 8002924:	d82a      	bhi.n	800297c <HAL_GPIO_Init+0xcc>
 8002926:	2b12      	cmp	r3, #18
 8002928:	d859      	bhi.n	80029de <HAL_GPIO_Init+0x12e>
 800292a:	a201      	add	r2, pc, #4	@ (adr r2, 8002930 <HAL_GPIO_Init+0x80>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	080029ab 	.word	0x080029ab
 8002934:	08002985 	.word	0x08002985
 8002938:	08002997 	.word	0x08002997
 800293c:	080029d9 	.word	0x080029d9
 8002940:	080029df 	.word	0x080029df
 8002944:	080029df 	.word	0x080029df
 8002948:	080029df 	.word	0x080029df
 800294c:	080029df 	.word	0x080029df
 8002950:	080029df 	.word	0x080029df
 8002954:	080029df 	.word	0x080029df
 8002958:	080029df 	.word	0x080029df
 800295c:	080029df 	.word	0x080029df
 8002960:	080029df 	.word	0x080029df
 8002964:	080029df 	.word	0x080029df
 8002968:	080029df 	.word	0x080029df
 800296c:	080029df 	.word	0x080029df
 8002970:	080029df 	.word	0x080029df
 8002974:	0800298d 	.word	0x0800298d
 8002978:	080029a1 	.word	0x080029a1
 800297c:	4a79      	ldr	r2, [pc, #484]	@ (8002b64 <HAL_GPIO_Init+0x2b4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002982:	e02c      	b.n	80029de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	623b      	str	r3, [r7, #32]
          break;
 800298a:	e029      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	3304      	adds	r3, #4
 8002992:	623b      	str	r3, [r7, #32]
          break;
 8002994:	e024      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	3308      	adds	r3, #8
 800299c:	623b      	str	r3, [r7, #32]
          break;
 800299e:	e01f      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	330c      	adds	r3, #12
 80029a6:	623b      	str	r3, [r7, #32]
          break;
 80029a8:	e01a      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d102      	bne.n	80029b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029b2:	2304      	movs	r3, #4
 80029b4:	623b      	str	r3, [r7, #32]
          break;
 80029b6:	e013      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d105      	bne.n	80029cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c0:	2308      	movs	r3, #8
 80029c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	611a      	str	r2, [r3, #16]
          break;
 80029ca:	e009      	b.n	80029e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029cc:	2308      	movs	r3, #8
 80029ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	615a      	str	r2, [r3, #20]
          break;
 80029d6:	e003      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d8:	2300      	movs	r3, #0
 80029da:	623b      	str	r3, [r7, #32]
          break;
 80029dc:	e000      	b.n	80029e0 <HAL_GPIO_Init+0x130>
          break;
 80029de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2bff      	cmp	r3, #255	@ 0xff
 80029e4:	d801      	bhi.n	80029ea <HAL_GPIO_Init+0x13a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	e001      	b.n	80029ee <HAL_GPIO_Init+0x13e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2bff      	cmp	r3, #255	@ 0xff
 80029f4:	d802      	bhi.n	80029fc <HAL_GPIO_Init+0x14c>
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	e002      	b.n	8002a02 <HAL_GPIO_Init+0x152>
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	3b08      	subs	r3, #8
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	210f      	movs	r1, #15
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	401a      	ands	r2, r3
 8002a14:	6a39      	ldr	r1, [r7, #32]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80b1 	beq.w	8002b92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a30:	4b4d      	ldr	r3, [pc, #308]	@ (8002b68 <HAL_GPIO_Init+0x2b8>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	4a4c      	ldr	r2, [pc, #304]	@ (8002b68 <HAL_GPIO_Init+0x2b8>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6193      	str	r3, [r2, #24]
 8002a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8002b68 <HAL_GPIO_Init+0x2b8>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a48:	4a48      	ldr	r2, [pc, #288]	@ (8002b6c <HAL_GPIO_Init+0x2bc>)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	220f      	movs	r2, #15
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a40      	ldr	r2, [pc, #256]	@ (8002b70 <HAL_GPIO_Init+0x2c0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d013      	beq.n	8002a9c <HAL_GPIO_Init+0x1ec>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a3f      	ldr	r2, [pc, #252]	@ (8002b74 <HAL_GPIO_Init+0x2c4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00d      	beq.n	8002a98 <HAL_GPIO_Init+0x1e8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a3e      	ldr	r2, [pc, #248]	@ (8002b78 <HAL_GPIO_Init+0x2c8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d007      	beq.n	8002a94 <HAL_GPIO_Init+0x1e4>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a3d      	ldr	r2, [pc, #244]	@ (8002b7c <HAL_GPIO_Init+0x2cc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <HAL_GPIO_Init+0x1e0>
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e006      	b.n	8002a9e <HAL_GPIO_Init+0x1ee>
 8002a90:	2304      	movs	r3, #4
 8002a92:	e004      	b.n	8002a9e <HAL_GPIO_Init+0x1ee>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e002      	b.n	8002a9e <HAL_GPIO_Init+0x1ee>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_GPIO_Init+0x1ee>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa0:	f002 0203 	and.w	r2, r2, #3
 8002aa4:	0092      	lsls	r2, r2, #2
 8002aa6:	4093      	lsls	r3, r2
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aae:	492f      	ldr	r1, [pc, #188]	@ (8002b6c <HAL_GPIO_Init+0x2bc>)
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	492c      	ldr	r1, [pc, #176]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]
 8002ad4:	e006      	b.n	8002ae4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	4928      	ldr	r1, [pc, #160]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d006      	beq.n	8002afe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002af0:	4b23      	ldr	r3, [pc, #140]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	4922      	ldr	r1, [pc, #136]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60cb      	str	r3, [r1, #12]
 8002afc:	e006      	b.n	8002b0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002afe:	4b20      	ldr	r3, [pc, #128]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	491e      	ldr	r1, [pc, #120]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d006      	beq.n	8002b26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b18:	4b19      	ldr	r3, [pc, #100]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	4918      	ldr	r1, [pc, #96]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b26:	4b16      	ldr	r3, [pc, #88]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	4914      	ldr	r1, [pc, #80]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d021      	beq.n	8002b84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b40:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	490e      	ldr	r1, [pc, #56]	@ (8002b80 <HAL_GPIO_Init+0x2d0>)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	600b      	str	r3, [r1, #0]
 8002b4c:	e021      	b.n	8002b92 <HAL_GPIO_Init+0x2e2>
 8002b4e:	bf00      	nop
 8002b50:	10320000 	.word	0x10320000
 8002b54:	10310000 	.word	0x10310000
 8002b58:	10220000 	.word	0x10220000
 8002b5c:	10210000 	.word	0x10210000
 8002b60:	10120000 	.word	0x10120000
 8002b64:	10110000 	.word	0x10110000
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40010800 	.word	0x40010800
 8002b74:	40010c00 	.word	0x40010c00
 8002b78:	40011000 	.word	0x40011000
 8002b7c:	40011400 	.word	0x40011400
 8002b80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	4909      	ldr	r1, [pc, #36]	@ (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	3301      	adds	r3, #1
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f47f ae8e 	bne.w	80028c4 <HAL_GPIO_Init+0x14>
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	372c      	adds	r7, #44	@ 0x2c
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	887b      	ldrh	r3, [r7, #2]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	e001      	b.n	8002bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	807b      	strh	r3, [r7, #2]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bf6:	787b      	ldrb	r3, [r7, #1]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bfc:	887a      	ldrh	r2, [r7, #2]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c02:	e003      	b.n	8002c0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	041a      	lsls	r2, r3, #16
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	611a      	str	r2, [r3, #16]
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e272      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c38:	4b92      	ldr	r3, [pc, #584]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d00c      	beq.n	8002c5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c44:	4b8f      	ldr	r3, [pc, #572]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d112      	bne.n	8002c76 <HAL_RCC_OscConfig+0x5e>
 8002c50:	4b8c      	ldr	r3, [pc, #560]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c5c:	d10b      	bne.n	8002c76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5e:	4b89      	ldr	r3, [pc, #548]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d06c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x12c>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d168      	bne.n	8002d44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e24c      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCC_OscConfig+0x76>
 8002c80:	4b80      	ldr	r3, [pc, #512]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a7f      	ldr	r2, [pc, #508]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	e02e      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x98>
 8002c96:	4b7b      	ldr	r3, [pc, #492]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a7a      	ldr	r2, [pc, #488]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	4b78      	ldr	r3, [pc, #480]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a77      	ldr	r2, [pc, #476]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01d      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xbc>
 8002cba:	4b72      	ldr	r3, [pc, #456]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a71      	ldr	r2, [pc, #452]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b6f      	ldr	r3, [pc, #444]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a6e      	ldr	r2, [pc, #440]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xd4>
 8002cd4:	4b6b      	ldr	r3, [pc, #428]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b68      	ldr	r3, [pc, #416]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a67      	ldr	r2, [pc, #412]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fe84 	bl	8001a00 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fe80 	bl	8001a00 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	@ 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e200      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xe4>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fe70 	bl	8001a00 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe fe6c 	bl	8001a00 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	@ 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1ec      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	4b53      	ldr	r3, [pc, #332]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x10c>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d063      	beq.n	8002e1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d52:	4b4c      	ldr	r3, [pc, #304]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d5e:	4b49      	ldr	r3, [pc, #292]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d11c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x18c>
 8002d6a:	4b46      	ldr	r3, [pc, #280]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d116      	bne.n	8002da4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	4b43      	ldr	r3, [pc, #268]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_RCC_OscConfig+0x176>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e1c0      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4939      	ldr	r1, [pc, #228]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	e03a      	b.n	8002e1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dac:	4b36      	ldr	r3, [pc, #216]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe fe25 	bl	8001a00 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe fe21 	bl	8001a00 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e1a1      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4927      	ldr	r1, [pc, #156]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
 8002dec:	e015      	b.n	8002e1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dee:	4b26      	ldr	r3, [pc, #152]	@ (8002e88 <HAL_RCC_OscConfig+0x270>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe fe04 	bl	8001a00 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfc:	f7fe fe00 	bl	8001a00 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e180      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d03a      	beq.n	8002e9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d019      	beq.n	8002e62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2e:	4b17      	ldr	r3, [pc, #92]	@ (8002e8c <HAL_RCC_OscConfig+0x274>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7fe fde4 	bl	8001a00 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7fe fde0 	bl	8001a00 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e160      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e84 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	f000 fa9c 	bl	8003398 <RCC_Delay>
 8002e60:	e01c      	b.n	8002e9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e62:	4b0a      	ldr	r3, [pc, #40]	@ (8002e8c <HAL_RCC_OscConfig+0x274>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7fe fdca 	bl	8001a00 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6e:	e00f      	b.n	8002e90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fe fdc6 	bl	8001a00 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d908      	bls.n	8002e90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e146      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000
 8002e88:	42420000 	.word	0x42420000
 8002e8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	4b92      	ldr	r3, [pc, #584]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e9      	bne.n	8002e70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80a6 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eae:	4b8b      	ldr	r3, [pc, #556]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10d      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	4b88      	ldr	r3, [pc, #544]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4a87      	ldr	r2, [pc, #540]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec4:	61d3      	str	r3, [r2, #28]
 8002ec6:	4b85      	ldr	r3, [pc, #532]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	4b82      	ldr	r3, [pc, #520]	@ (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d118      	bne.n	8002f14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a7e      	ldr	r2, [pc, #504]	@ (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eee:	f7fe fd87 	bl	8001a00 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef6:	f7fe fd83 	bl	8001a00 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b64      	cmp	r3, #100	@ 0x64
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e103      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	4b75      	ldr	r3, [pc, #468]	@ (80030e0 <HAL_RCC_OscConfig+0x4c8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x312>
 8002f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4a6e      	ldr	r2, [pc, #440]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6213      	str	r3, [r2, #32]
 8002f28:	e02d      	b.n	8002f86 <HAL_RCC_OscConfig+0x36e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x334>
 8002f32:	4b6a      	ldr	r3, [pc, #424]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	4a69      	ldr	r2, [pc, #420]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6213      	str	r3, [r2, #32]
 8002f3e:	4b67      	ldr	r3, [pc, #412]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a66      	ldr	r2, [pc, #408]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	6213      	str	r3, [r2, #32]
 8002f4a:	e01c      	b.n	8002f86 <HAL_RCC_OscConfig+0x36e>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d10c      	bne.n	8002f6e <HAL_RCC_OscConfig+0x356>
 8002f54:	4b61      	ldr	r3, [pc, #388]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a60      	ldr	r2, [pc, #384]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6213      	str	r3, [r2, #32]
 8002f60:	4b5e      	ldr	r3, [pc, #376]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	4a5d      	ldr	r2, [pc, #372]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6213      	str	r3, [r2, #32]
 8002f6c:	e00b      	b.n	8002f86 <HAL_RCC_OscConfig+0x36e>
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a5a      	ldr	r2, [pc, #360]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6213      	str	r3, [r2, #32]
 8002f7a:	4b58      	ldr	r3, [pc, #352]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a57      	ldr	r2, [pc, #348]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d015      	beq.n	8002fba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fd37 	bl	8001a00 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe fd33 	bl	8001a00 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0b1      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	4b4b      	ldr	r3, [pc, #300]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ee      	beq.n	8002f96 <HAL_RCC_OscConfig+0x37e>
 8002fb8:	e014      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fba:	f7fe fd21 	bl	8001a00 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc2:	f7fe fd1d 	bl	8001a00 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e09b      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd8:	4b40      	ldr	r3, [pc, #256]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ee      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d105      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fea:	4b3c      	ldr	r3, [pc, #240]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	4a3b      	ldr	r2, [pc, #236]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8002ff0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ff4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8087 	beq.w	800310e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003000:	4b36      	ldr	r3, [pc, #216]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b08      	cmp	r3, #8
 800300a:	d061      	beq.n	80030d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d146      	bne.n	80030a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003014:	4b33      	ldr	r3, [pc, #204]	@ (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fe fcf1 	bl	8001a00 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003022:	f7fe fced 	bl	8001a00 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e06d      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003034:	4b29      	ldr	r3, [pc, #164]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f0      	bne.n	8003022 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003048:	d108      	bne.n	800305c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800304a:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	4921      	ldr	r1, [pc, #132]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800305c:	4b1f      	ldr	r3, [pc, #124]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a19      	ldr	r1, [r3, #32]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	430b      	orrs	r3, r1
 800306e:	491b      	ldr	r1, [pc, #108]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003074:	4b1b      	ldr	r3, [pc, #108]	@ (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe fcc1 	bl	8001a00 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe fcbd 	bl	8001a00 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e03d      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003094:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x46a>
 80030a0:	e035      	b.n	800310e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <HAL_RCC_OscConfig+0x4cc>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe fcaa 	bl	8001a00 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe fca6 	bl	8001a00 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e026      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c2:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_RCC_OscConfig+0x4c4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x498>
 80030ce:	e01e      	b.n	800310e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e019      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
 80030e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_OscConfig+0x500>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d001      	beq.n	800310e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000

0800311c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0d0      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003130:	4b6a      	ldr	r3, [pc, #424]	@ (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d910      	bls.n	8003160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b67      	ldr	r3, [pc, #412]	@ (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 0207 	bic.w	r2, r3, #7
 8003146:	4965      	ldr	r1, [pc, #404]	@ (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314e:	4b63      	ldr	r3, [pc, #396]	@ (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0b8      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d020      	beq.n	80031ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003178:	4b59      	ldr	r3, [pc, #356]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4a58      	ldr	r2, [pc, #352]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003182:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003190:	4b53      	ldr	r3, [pc, #332]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a52      	ldr	r2, [pc, #328]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800319a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800319c:	4b50      	ldr	r3, [pc, #320]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	494d      	ldr	r1, [pc, #308]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d040      	beq.n	800323c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	4b47      	ldr	r3, [pc, #284]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d115      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e07f      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031da:	4b41      	ldr	r3, [pc, #260]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e073      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	4b3d      	ldr	r3, [pc, #244]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e06b      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031fa:	4b39      	ldr	r3, [pc, #228]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f023 0203 	bic.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4936      	ldr	r1, [pc, #216]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800320c:	f7fe fbf8 	bl	8001a00 <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	e00a      	b.n	800322a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003214:	f7fe fbf4 	bl	8001a00 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e053      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	4b2d      	ldr	r3, [pc, #180]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 020c 	and.w	r2, r3, #12
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	429a      	cmp	r2, r3
 800323a:	d1eb      	bne.n	8003214 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800323c:	4b27      	ldr	r3, [pc, #156]	@ (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d210      	bcs.n	800326c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b24      	ldr	r3, [pc, #144]	@ (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 0207 	bic.w	r2, r3, #7
 8003252:	4922      	ldr	r1, [pc, #136]	@ (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b20      	ldr	r3, [pc, #128]	@ (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e032      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003278:	4b19      	ldr	r3, [pc, #100]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4916      	ldr	r1, [pc, #88]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003296:	4b12      	ldr	r3, [pc, #72]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	490e      	ldr	r1, [pc, #56]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032aa:	f000 f821 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80032ae:	4602      	mov	r2, r0
 80032b0:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	490a      	ldr	r1, [pc, #40]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	5ccb      	ldrb	r3, [r1, r3]
 80032be:	fa22 f303 	lsr.w	r3, r2, r3
 80032c2:	4a09      	ldr	r2, [pc, #36]	@ (80032e8 <HAL_RCC_ClockConfig+0x1cc>)
 80032c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032c6:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_RCC_ClockConfig+0x1d0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fb56 	bl	800197c <HAL_InitTick>

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40022000 	.word	0x40022000
 80032e0:	40021000 	.word	0x40021000
 80032e4:	08004a60 	.word	0x08004a60
 80032e8:	20000008 	.word	0x20000008
 80032ec:	2000000c 	.word	0x2000000c

080032f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800330a:	4b1e      	ldr	r3, [pc, #120]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x94>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b04      	cmp	r3, #4
 8003318:	d002      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0x30>
 800331a:	2b08      	cmp	r3, #8
 800331c:	d003      	beq.n	8003326 <HAL_RCC_GetSysClockFreq+0x36>
 800331e:	e027      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003320:	4b19      	ldr	r3, [pc, #100]	@ (8003388 <HAL_RCC_GetSysClockFreq+0x98>)
 8003322:	613b      	str	r3, [r7, #16]
      break;
 8003324:	e027      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	0c9b      	lsrs	r3, r3, #18
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	4a17      	ldr	r2, [pc, #92]	@ (800338c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003330:	5cd3      	ldrb	r3, [r2, r3]
 8003332:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d010      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800333e:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <HAL_RCC_GetSysClockFreq+0x94>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	0c5b      	lsrs	r3, r3, #17
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	4a11      	ldr	r2, [pc, #68]	@ (8003390 <HAL_RCC_GetSysClockFreq+0xa0>)
 800334a:	5cd3      	ldrb	r3, [r2, r3]
 800334c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a0d      	ldr	r2, [pc, #52]	@ (8003388 <HAL_RCC_GetSysClockFreq+0x98>)
 8003352:	fb03 f202 	mul.w	r2, r3, r2
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e004      	b.n	800336a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a0c      	ldr	r2, [pc, #48]	@ (8003394 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003364:	fb02 f303 	mul.w	r3, r2, r3
 8003368:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	613b      	str	r3, [r7, #16]
      break;
 800336e:	e002      	b.n	8003376 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4b05      	ldr	r3, [pc, #20]	@ (8003388 <HAL_RCC_GetSysClockFreq+0x98>)
 8003372:	613b      	str	r3, [r7, #16]
      break;
 8003374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003376:	693b      	ldr	r3, [r7, #16]
}
 8003378:	4618      	mov	r0, r3
 800337a:	371c      	adds	r7, #28
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
 8003388:	007a1200 	.word	0x007a1200
 800338c:	08004a70 	.word	0x08004a70
 8003390:	08004a80 	.word	0x08004a80
 8003394:	003d0900 	.word	0x003d0900

08003398 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033a0:	4b0a      	ldr	r3, [pc, #40]	@ (80033cc <RCC_Delay+0x34>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a0a      	ldr	r2, [pc, #40]	@ (80033d0 <RCC_Delay+0x38>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0a5b      	lsrs	r3, r3, #9
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033b4:	bf00      	nop
  }
  while (Delay --);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1e5a      	subs	r2, r3, #1
 80033ba:	60fa      	str	r2, [r7, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f9      	bne.n	80033b4 <RCC_Delay+0x1c>
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	20000008 	.word	0x20000008
 80033d0:	10624dd3 	.word	0x10624dd3

080033d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e041      	b.n	800346a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe f97e 	bl	80016fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	4619      	mov	r1, r3
 8003412:	4610      	mov	r0, r2
 8003414:	f000 fe2c 	bl	8004070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e041      	b.n	8003508 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d106      	bne.n	800349e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f839 	bl	8003510 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f000 fddd 	bl	8004070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
	...

08003524 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_TIM_OC_Start_IT+0x28>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e022      	b.n	8003592 <HAL_TIM_OC_Start_IT+0x6e>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b04      	cmp	r3, #4
 8003550:	d109      	bne.n	8003566 <HAL_TIM_OC_Start_IT+0x42>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	bf14      	ite	ne
 800355e:	2301      	movne	r3, #1
 8003560:	2300      	moveq	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e015      	b.n	8003592 <HAL_TIM_OC_Start_IT+0x6e>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d109      	bne.n	8003580 <HAL_TIM_OC_Start_IT+0x5c>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	e008      	b.n	8003592 <HAL_TIM_OC_Start_IT+0x6e>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e0a9      	b.n	80036ee <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <HAL_TIM_OC_Start_IT+0x86>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035a8:	e013      	b.n	80035d2 <HAL_TIM_OC_Start_IT+0xae>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d104      	bne.n	80035ba <HAL_TIM_OC_Start_IT+0x96>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b8:	e00b      	b.n	80035d2 <HAL_TIM_OC_Start_IT+0xae>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d104      	bne.n	80035ca <HAL_TIM_OC_Start_IT+0xa6>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c8:	e003      	b.n	80035d2 <HAL_TIM_OC_Start_IT+0xae>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d841      	bhi.n	800365c <HAL_TIM_OC_Start_IT+0x138>
 80035d8:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <HAL_TIM_OC_Start_IT+0xbc>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	08003615 	.word	0x08003615
 80035e4:	0800365d 	.word	0x0800365d
 80035e8:	0800365d 	.word	0x0800365d
 80035ec:	0800365d 	.word	0x0800365d
 80035f0:	08003627 	.word	0x08003627
 80035f4:	0800365d 	.word	0x0800365d
 80035f8:	0800365d 	.word	0x0800365d
 80035fc:	0800365d 	.word	0x0800365d
 8003600:	08003639 	.word	0x08003639
 8003604:	0800365d 	.word	0x0800365d
 8003608:	0800365d 	.word	0x0800365d
 800360c:	0800365d 	.word	0x0800365d
 8003610:	0800364b 	.word	0x0800364b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0202 	orr.w	r2, r2, #2
 8003622:	60da      	str	r2, [r3, #12]
      break;
 8003624:	e01d      	b.n	8003662 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 0204 	orr.w	r2, r2, #4
 8003634:	60da      	str	r2, [r3, #12]
      break;
 8003636:	e014      	b.n	8003662 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0208 	orr.w	r2, r2, #8
 8003646:	60da      	str	r2, [r3, #12]
      break;
 8003648:	e00b      	b.n	8003662 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0210 	orr.w	r2, r2, #16
 8003658:	60da      	str	r2, [r3, #12]
      break;
 800365a:	e002      	b.n	8003662 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      break;
 8003660:	bf00      	nop
  }

  if (status == HAL_OK)
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d141      	bne.n	80036ec <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2201      	movs	r2, #1
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f001 f928 	bl	80048c6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1f      	ldr	r2, [pc, #124]	@ (80036f8 <HAL_TIM_OC_Start_IT+0x1d4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d107      	bne.n	8003690 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800368e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a18      	ldr	r2, [pc, #96]	@ (80036f8 <HAL_TIM_OC_Start_IT+0x1d4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00e      	beq.n	80036b8 <HAL_TIM_OC_Start_IT+0x194>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036a2:	d009      	beq.n	80036b8 <HAL_TIM_OC_Start_IT+0x194>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a14      	ldr	r2, [pc, #80]	@ (80036fc <HAL_TIM_OC_Start_IT+0x1d8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_TIM_OC_Start_IT+0x194>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a13      	ldr	r2, [pc, #76]	@ (8003700 <HAL_TIM_OC_Start_IT+0x1dc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d111      	bne.n	80036dc <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d010      	beq.n	80036ec <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036da:	e007      	b.n	80036ec <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800

08003704 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e041      	b.n	800379a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f839 	bl	80037a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	4619      	mov	r1, r3
 8003742:	4610      	mov	r0, r2
 8003744:	f000 fc94 	bl	8004070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_IC_Start_IT+0x1e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	e013      	b.n	80037fa <HAL_TIM_IC_Start_IT+0x46>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d104      	bne.n	80037e2 <HAL_TIM_IC_Start_IT+0x2e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	e00b      	b.n	80037fa <HAL_TIM_IC_Start_IT+0x46>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_IC_Start_IT+0x3e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	e003      	b.n	80037fa <HAL_TIM_IC_Start_IT+0x46>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d104      	bne.n	800380c <HAL_TIM_IC_Start_IT+0x58>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003808:	b2db      	uxtb	r3, r3
 800380a:	e013      	b.n	8003834 <HAL_TIM_IC_Start_IT+0x80>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b04      	cmp	r3, #4
 8003810:	d104      	bne.n	800381c <HAL_TIM_IC_Start_IT+0x68>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e00b      	b.n	8003834 <HAL_TIM_IC_Start_IT+0x80>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b08      	cmp	r3, #8
 8003820:	d104      	bne.n	800382c <HAL_TIM_IC_Start_IT+0x78>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e003      	b.n	8003834 <HAL_TIM_IC_Start_IT+0x80>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003832:	b2db      	uxtb	r3, r3
 8003834:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003836:	7bbb      	ldrb	r3, [r7, #14]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d102      	bne.n	8003842 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800383c:	7b7b      	ldrb	r3, [r7, #13]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d001      	beq.n	8003846 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0b8      	b.n	80039b8 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d104      	bne.n	8003856 <HAL_TIM_IC_Start_IT+0xa2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003854:	e013      	b.n	800387e <HAL_TIM_IC_Start_IT+0xca>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d104      	bne.n	8003866 <HAL_TIM_IC_Start_IT+0xb2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003864:	e00b      	b.n	800387e <HAL_TIM_IC_Start_IT+0xca>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d104      	bne.n	8003876 <HAL_TIM_IC_Start_IT+0xc2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003874:	e003      	b.n	800387e <HAL_TIM_IC_Start_IT+0xca>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <HAL_TIM_IC_Start_IT+0xda>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800388c:	e013      	b.n	80038b6 <HAL_TIM_IC_Start_IT+0x102>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d104      	bne.n	800389e <HAL_TIM_IC_Start_IT+0xea>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800389c:	e00b      	b.n	80038b6 <HAL_TIM_IC_Start_IT+0x102>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d104      	bne.n	80038ae <HAL_TIM_IC_Start_IT+0xfa>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ac:	e003      	b.n	80038b6 <HAL_TIM_IC_Start_IT+0x102>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b0c      	cmp	r3, #12
 80038ba:	d841      	bhi.n	8003940 <HAL_TIM_IC_Start_IT+0x18c>
 80038bc:	a201      	add	r2, pc, #4	@ (adr r2, 80038c4 <HAL_TIM_IC_Start_IT+0x110>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	08003941 	.word	0x08003941
 80038cc:	08003941 	.word	0x08003941
 80038d0:	08003941 	.word	0x08003941
 80038d4:	0800390b 	.word	0x0800390b
 80038d8:	08003941 	.word	0x08003941
 80038dc:	08003941 	.word	0x08003941
 80038e0:	08003941 	.word	0x08003941
 80038e4:	0800391d 	.word	0x0800391d
 80038e8:	08003941 	.word	0x08003941
 80038ec:	08003941 	.word	0x08003941
 80038f0:	08003941 	.word	0x08003941
 80038f4:	0800392f 	.word	0x0800392f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0202 	orr.w	r2, r2, #2
 8003906:	60da      	str	r2, [r3, #12]
      break;
 8003908:	e01d      	b.n	8003946 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0204 	orr.w	r2, r2, #4
 8003918:	60da      	str	r2, [r3, #12]
      break;
 800391a:	e014      	b.n	8003946 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0208 	orr.w	r2, r2, #8
 800392a:	60da      	str	r2, [r3, #12]
      break;
 800392c:	e00b      	b.n	8003946 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0210 	orr.w	r2, r2, #16
 800393c:	60da      	str	r2, [r3, #12]
      break;
 800393e:	e002      	b.n	8003946 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      break;
 8003944:	bf00      	nop
  }

  if (status == HAL_OK)
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d134      	bne.n	80039b6 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2201      	movs	r2, #1
 8003952:	6839      	ldr	r1, [r7, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 ffb6 	bl	80048c6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a18      	ldr	r2, [pc, #96]	@ (80039c0 <HAL_TIM_IC_Start_IT+0x20c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_TIM_IC_Start_IT+0x1ce>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800396c:	d009      	beq.n	8003982 <HAL_TIM_IC_Start_IT+0x1ce>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a14      	ldr	r2, [pc, #80]	@ (80039c4 <HAL_TIM_IC_Start_IT+0x210>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_TIM_IC_Start_IT+0x1ce>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a12      	ldr	r2, [pc, #72]	@ (80039c8 <HAL_TIM_IC_Start_IT+0x214>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b06      	cmp	r3, #6
 8003992:	d010      	beq.n	80039b6 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a4:	e007      	b.n	80039b6 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40012c00 	.word	0x40012c00
 80039c4:	40000400 	.word	0x40000400
 80039c8:	40000800 	.word	0x40000800

080039cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d020      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d01b      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0202 	mvn.w	r2, #2
 8003a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fd f9a8 	bl	8000d6c <HAL_TIM_IC_CaptureCallback>
 8003a1c:	e005      	b.n	8003a2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd f9d6 	bl	8000dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fb10 	bl	800404a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d020      	beq.n	8003a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01b      	beq.n	8003a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0204 	mvn.w	r2, #4
 8003a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fd f982 	bl	8000d6c <HAL_TIM_IC_CaptureCallback>
 8003a68:	e005      	b.n	8003a76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd f9b0 	bl	8000dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 faea 	bl	800404a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d020      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01b      	beq.n	8003ac8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0208 	mvn.w	r2, #8
 8003a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2204      	movs	r2, #4
 8003a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd f95c 	bl	8000d6c <HAL_TIM_IC_CaptureCallback>
 8003ab4:	e005      	b.n	8003ac2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd f98a 	bl	8000dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fac4 	bl	800404a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d020      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01b      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0210 	mvn.w	r2, #16
 8003ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2208      	movs	r2, #8
 8003aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fd f936 	bl	8000d6c <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd f964 	bl	8000dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fa9e 	bl	800404a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0201 	mvn.w	r2, #1
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fa80 	bl	8004038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00c      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 ff41 	bl	80049de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00c      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fa6e 	bl	800405c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00c      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0220 	mvn.w	r2, #32
 8003b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 ff14 	bl	80049cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_OC_ConfigChannel+0x1e>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e048      	b.n	8003c5c <HAL_TIM_OC_ConfigChannel+0xb0>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b0c      	cmp	r3, #12
 8003bd6:	d839      	bhi.n	8003c4c <HAL_TIM_OC_ConfigChannel+0xa0>
 8003bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003be0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bde:	bf00      	nop
 8003be0:	08003c15 	.word	0x08003c15
 8003be4:	08003c4d 	.word	0x08003c4d
 8003be8:	08003c4d 	.word	0x08003c4d
 8003bec:	08003c4d 	.word	0x08003c4d
 8003bf0:	08003c23 	.word	0x08003c23
 8003bf4:	08003c4d 	.word	0x08003c4d
 8003bf8:	08003c4d 	.word	0x08003c4d
 8003bfc:	08003c4d 	.word	0x08003c4d
 8003c00:	08003c31 	.word	0x08003c31
 8003c04:	08003c4d 	.word	0x08003c4d
 8003c08:	08003c4d 	.word	0x08003c4d
 8003c0c:	08003c4d 	.word	0x08003c4d
 8003c10:	08003c3f 	.word	0x08003c3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fa96 	bl	800414c <TIM_OC1_SetConfig>
      break;
 8003c20:	e017      	b.n	8003c52 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 faf5 	bl	8004218 <TIM_OC2_SetConfig>
      break;
 8003c2e:	e010      	b.n	8003c52 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fb58 	bl	80042ec <TIM_OC3_SetConfig>
      break;
 8003c3c:	e009      	b.n	8003c52 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fbbb 	bl	80043c0 <TIM_OC4_SetConfig>
      break;
 8003c4a:	e002      	b.n	8003c52 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e088      	b.n	8003d94 <HAL_TIM_IC_ConfigChannel+0x130>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d11b      	bne.n	8003cc8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003ca0:	f000 fc6e 	bl	8004580 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 020c 	bic.w	r2, r2, #12
 8003cb2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6999      	ldr	r1, [r3, #24]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	619a      	str	r2, [r3, #24]
 8003cc6:	e060      	b.n	8003d8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d11c      	bne.n	8003d08 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003cde:	f000 fcd7 	bl	8004690 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003cf0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6999      	ldr	r1, [r3, #24]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	021a      	lsls	r2, r3, #8
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	619a      	str	r2, [r3, #24]
 8003d06:	e040      	b.n	8003d8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d11b      	bne.n	8003d46 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003d1e:	f000 fd22 	bl	8004766 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69da      	ldr	r2, [r3, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 020c 	bic.w	r2, r2, #12
 8003d30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69d9      	ldr	r1, [r3, #28]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	61da      	str	r2, [r3, #28]
 8003d44:	e021      	b.n	8003d8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b0c      	cmp	r3, #12
 8003d4a:	d11c      	bne.n	8003d86 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003d5c:	f000 fd3e 	bl	80047dc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69da      	ldr	r2, [r3, #28]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d6e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69d9      	ldr	r1, [r3, #28]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	021a      	lsls	r2, r3, #8
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	61da      	str	r2, [r3, #28]
 8003d84:	e001      	b.n	8003d8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_TIM_ConfigClockSource+0x1c>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e0b4      	b.n	8003f22 <HAL_TIM_ConfigClockSource+0x186>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df0:	d03e      	beq.n	8003e70 <HAL_TIM_ConfigClockSource+0xd4>
 8003df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df6:	f200 8087 	bhi.w	8003f08 <HAL_TIM_ConfigClockSource+0x16c>
 8003dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dfe:	f000 8086 	beq.w	8003f0e <HAL_TIM_ConfigClockSource+0x172>
 8003e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e06:	d87f      	bhi.n	8003f08 <HAL_TIM_ConfigClockSource+0x16c>
 8003e08:	2b70      	cmp	r3, #112	@ 0x70
 8003e0a:	d01a      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0xa6>
 8003e0c:	2b70      	cmp	r3, #112	@ 0x70
 8003e0e:	d87b      	bhi.n	8003f08 <HAL_TIM_ConfigClockSource+0x16c>
 8003e10:	2b60      	cmp	r3, #96	@ 0x60
 8003e12:	d050      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0x11a>
 8003e14:	2b60      	cmp	r3, #96	@ 0x60
 8003e16:	d877      	bhi.n	8003f08 <HAL_TIM_ConfigClockSource+0x16c>
 8003e18:	2b50      	cmp	r3, #80	@ 0x50
 8003e1a:	d03c      	beq.n	8003e96 <HAL_TIM_ConfigClockSource+0xfa>
 8003e1c:	2b50      	cmp	r3, #80	@ 0x50
 8003e1e:	d873      	bhi.n	8003f08 <HAL_TIM_ConfigClockSource+0x16c>
 8003e20:	2b40      	cmp	r3, #64	@ 0x40
 8003e22:	d058      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0x13a>
 8003e24:	2b40      	cmp	r3, #64	@ 0x40
 8003e26:	d86f      	bhi.n	8003f08 <HAL_TIM_ConfigClockSource+0x16c>
 8003e28:	2b30      	cmp	r3, #48	@ 0x30
 8003e2a:	d064      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x15a>
 8003e2c:	2b30      	cmp	r3, #48	@ 0x30
 8003e2e:	d86b      	bhi.n	8003f08 <HAL_TIM_ConfigClockSource+0x16c>
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d060      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x15a>
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d867      	bhi.n	8003f08 <HAL_TIM_ConfigClockSource+0x16c>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d05c      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x15a>
 8003e3c:	2b10      	cmp	r3, #16
 8003e3e:	d05a      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x15a>
 8003e40:	e062      	b.n	8003f08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e52:	f000 fd19 	bl	8004888 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	609a      	str	r2, [r3, #8]
      break;
 8003e6e:	e04f      	b.n	8003f10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e80:	f000 fd02 	bl	8004888 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e92:	609a      	str	r2, [r3, #8]
      break;
 8003e94:	e03c      	b.n	8003f10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f000 fbc6 	bl	8004634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2150      	movs	r1, #80	@ 0x50
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fcd0 	bl	8004854 <TIM_ITRx_SetConfig>
      break;
 8003eb4:	e02c      	b.n	8003f10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f000 fc20 	bl	8004708 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2160      	movs	r1, #96	@ 0x60
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fcc0 	bl	8004854 <TIM_ITRx_SetConfig>
      break;
 8003ed4:	e01c      	b.n	8003f10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f000 fba6 	bl	8004634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2140      	movs	r1, #64	@ 0x40
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fcb0 	bl	8004854 <TIM_ITRx_SetConfig>
      break;
 8003ef4:	e00c      	b.n	8003f10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4619      	mov	r1, r3
 8003f00:	4610      	mov	r0, r2
 8003f02:	f000 fca7 	bl	8004854 <TIM_ITRx_SetConfig>
      break;
 8003f06:	e003      	b.n	8003f10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f0c:	e000      	b.n	8003f10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e031      	b.n	8003fa6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003f52:	6839      	ldr	r1, [r7, #0]
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fa81 	bl	800445c <TIM_SlaveTimer_SetConfig>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d009      	beq.n	8003f74 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e018      	b.n	8003fa6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f82:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f92:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b0c      	cmp	r3, #12
 8003fc2:	d831      	bhi.n	8004028 <HAL_TIM_ReadCapturedValue+0x78>
 8003fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fcc <HAL_TIM_ReadCapturedValue+0x1c>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08004001 	.word	0x08004001
 8003fd0:	08004029 	.word	0x08004029
 8003fd4:	08004029 	.word	0x08004029
 8003fd8:	08004029 	.word	0x08004029
 8003fdc:	0800400b 	.word	0x0800400b
 8003fe0:	08004029 	.word	0x08004029
 8003fe4:	08004029 	.word	0x08004029
 8003fe8:	08004029 	.word	0x08004029
 8003fec:	08004015 	.word	0x08004015
 8003ff0:	08004029 	.word	0x08004029
 8003ff4:	08004029 	.word	0x08004029
 8003ff8:	08004029 	.word	0x08004029
 8003ffc:	0800401f 	.word	0x0800401f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004006:	60fb      	str	r3, [r7, #12]

      break;
 8004008:	e00f      	b.n	800402a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	60fb      	str	r3, [r7, #12]

      break;
 8004012:	e00a      	b.n	800402a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401a:	60fb      	str	r3, [r7, #12]

      break;
 800401c:	e005      	b.n	800402a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	60fb      	str	r3, [r7, #12]

      break;
 8004026:	e000      	b.n	800402a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004028:	bf00      	nop
  }

  return tmpreg;
 800402a:	68fb      	ldr	r3, [r7, #12]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop

08004038 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
	...

08004070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a2f      	ldr	r2, [pc, #188]	@ (8004140 <TIM_Base_SetConfig+0xd0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00b      	beq.n	80040a0 <TIM_Base_SetConfig+0x30>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408e:	d007      	beq.n	80040a0 <TIM_Base_SetConfig+0x30>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a2c      	ldr	r2, [pc, #176]	@ (8004144 <TIM_Base_SetConfig+0xd4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_Base_SetConfig+0x30>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a2b      	ldr	r2, [pc, #172]	@ (8004148 <TIM_Base_SetConfig+0xd8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d108      	bne.n	80040b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a22      	ldr	r2, [pc, #136]	@ (8004140 <TIM_Base_SetConfig+0xd0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00b      	beq.n	80040d2 <TIM_Base_SetConfig+0x62>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c0:	d007      	beq.n	80040d2 <TIM_Base_SetConfig+0x62>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004144 <TIM_Base_SetConfig+0xd4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d003      	beq.n	80040d2 <TIM_Base_SetConfig+0x62>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004148 <TIM_Base_SetConfig+0xd8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d108      	bne.n	80040e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a0d      	ldr	r2, [pc, #52]	@ (8004140 <TIM_Base_SetConfig+0xd0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d103      	bne.n	8004118 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f023 0201 	bic.w	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	611a      	str	r2, [r3, #16]
  }
}
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800

0800414c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f023 0201 	bic.w	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0303 	bic.w	r3, r3, #3
 8004182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 0302 	bic.w	r3, r3, #2
 8004194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004214 <TIM_OC1_SetConfig+0xc8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d10c      	bne.n	80041c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f023 0308 	bic.w	r3, r3, #8
 80041ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 0304 	bic.w	r3, r3, #4
 80041c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a13      	ldr	r2, [pc, #76]	@ (8004214 <TIM_OC1_SetConfig+0xc8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d111      	bne.n	80041ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	621a      	str	r2, [r3, #32]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40012c00 	.word	0x40012c00

08004218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f023 0210 	bic.w	r2, r3, #16
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f023 0320 	bic.w	r3, r3, #32
 8004262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a1d      	ldr	r2, [pc, #116]	@ (80042e8 <TIM_OC2_SetConfig+0xd0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10d      	bne.n	8004294 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800427e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004292:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a14      	ldr	r2, [pc, #80]	@ (80042e8 <TIM_OC2_SetConfig+0xd0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d113      	bne.n	80042c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	621a      	str	r2, [r3, #32]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	40012c00 	.word	0x40012c00

080042ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a1d      	ldr	r2, [pc, #116]	@ (80043bc <TIM_OC3_SetConfig+0xd0>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10d      	bne.n	8004366 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a14      	ldr	r2, [pc, #80]	@ (80043bc <TIM_OC3_SetConfig+0xd0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d113      	bne.n	8004396 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800437c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	621a      	str	r2, [r3, #32]
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40012c00 	.word	0x40012c00

080043c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	021b      	lsls	r3, r3, #8
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800440a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	031b      	lsls	r3, r3, #12
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a0f      	ldr	r2, [pc, #60]	@ (8004458 <TIM_OC4_SetConfig+0x98>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d109      	bne.n	8004434 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	019b      	lsls	r3, r3, #6
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	621a      	str	r2, [r3, #32]
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr
 8004458:	40012c00 	.word	0x40012c00

0800445c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004478:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 0307 	bic.w	r3, r3, #7
 800448a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b70      	cmp	r3, #112	@ 0x70
 80044a4:	d01a      	beq.n	80044dc <TIM_SlaveTimer_SetConfig+0x80>
 80044a6:	2b70      	cmp	r3, #112	@ 0x70
 80044a8:	d860      	bhi.n	800456c <TIM_SlaveTimer_SetConfig+0x110>
 80044aa:	2b60      	cmp	r3, #96	@ 0x60
 80044ac:	d054      	beq.n	8004558 <TIM_SlaveTimer_SetConfig+0xfc>
 80044ae:	2b60      	cmp	r3, #96	@ 0x60
 80044b0:	d85c      	bhi.n	800456c <TIM_SlaveTimer_SetConfig+0x110>
 80044b2:	2b50      	cmp	r3, #80	@ 0x50
 80044b4:	d046      	beq.n	8004544 <TIM_SlaveTimer_SetConfig+0xe8>
 80044b6:	2b50      	cmp	r3, #80	@ 0x50
 80044b8:	d858      	bhi.n	800456c <TIM_SlaveTimer_SetConfig+0x110>
 80044ba:	2b40      	cmp	r3, #64	@ 0x40
 80044bc:	d019      	beq.n	80044f2 <TIM_SlaveTimer_SetConfig+0x96>
 80044be:	2b40      	cmp	r3, #64	@ 0x40
 80044c0:	d854      	bhi.n	800456c <TIM_SlaveTimer_SetConfig+0x110>
 80044c2:	2b30      	cmp	r3, #48	@ 0x30
 80044c4:	d055      	beq.n	8004572 <TIM_SlaveTimer_SetConfig+0x116>
 80044c6:	2b30      	cmp	r3, #48	@ 0x30
 80044c8:	d850      	bhi.n	800456c <TIM_SlaveTimer_SetConfig+0x110>
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d051      	beq.n	8004572 <TIM_SlaveTimer_SetConfig+0x116>
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d84c      	bhi.n	800456c <TIM_SlaveTimer_SetConfig+0x110>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d04d      	beq.n	8004572 <TIM_SlaveTimer_SetConfig+0x116>
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d04b      	beq.n	8004572 <TIM_SlaveTimer_SetConfig+0x116>
 80044da:	e047      	b.n	800456c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80044ec:	f000 f9cc 	bl	8004888 <TIM_ETR_SetConfig>
      break;
 80044f0:	e040      	b.n	8004574 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d101      	bne.n	80044fe <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e03b      	b.n	8004576 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6a1a      	ldr	r2, [r3, #32]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004524:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	4313      	orrs	r3, r2
 8004530:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	621a      	str	r2, [r3, #32]
      break;
 8004542:	e017      	b.n	8004574 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004550:	461a      	mov	r2, r3
 8004552:	f000 f86f 	bl	8004634 <TIM_TI1_ConfigInputStage>
      break;
 8004556:	e00d      	b.n	8004574 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004564:	461a      	mov	r2, r3
 8004566:	f000 f8cf 	bl	8004708 <TIM_TI2_ConfigInputStage>
      break;
 800456a:	e003      	b.n	8004574 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	75fb      	strb	r3, [r7, #23]
      break;
 8004570:	e000      	b.n	8004574 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004572:	bf00      	nop
  }

  return status;
 8004574:	7dfb      	ldrb	r3, [r7, #23]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f023 0201 	bic.w	r2, r3, #1
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004628 <TIM_TI1_SetConfig+0xa8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <TIM_TI1_SetConfig+0x46>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b4:	d007      	beq.n	80045c6 <TIM_TI1_SetConfig+0x46>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a1c      	ldr	r2, [pc, #112]	@ (800462c <TIM_TI1_SetConfig+0xac>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_TI1_SetConfig+0x46>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004630 <TIM_TI1_SetConfig+0xb0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d101      	bne.n	80045ca <TIM_TI1_SetConfig+0x4a>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <TIM_TI1_SetConfig+0x4c>
 80045ca:	2300      	movs	r3, #0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f023 0303 	bic.w	r3, r3, #3
 80045d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e003      	b.n	80045ea <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f023 030a 	bic.w	r3, r3, #10
 8004604:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f003 030a 	and.w	r3, r3, #10
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800

08004634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004634:	b480      	push	{r7}
 8004636:	b087      	sub	sp, #28
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f023 0201 	bic.w	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800465e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f023 030a 	bic.w	r3, r3, #10
 8004670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	621a      	str	r2, [r3, #32]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f023 0210 	bic.w	r2, r3, #16
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	031b      	lsls	r3, r3, #12
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046e2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f023 0210 	bic.w	r2, r3, #16
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	031b      	lsls	r3, r3, #12
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004744:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	621a      	str	r2, [r3, #32]
}
 800475c:	bf00      	nop
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004766:	b480      	push	{r7}
 8004768:	b087      	sub	sp, #28
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f023 0303 	bic.w	r3, r3, #3
 8004792:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	621a      	str	r2, [r3, #32]
}
 80047d2:	bf00      	nop
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr

080047dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004808:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800481a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	031b      	lsls	r3, r3, #12
 8004820:	b29b      	uxth	r3, r3
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800482e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	031b      	lsls	r3, r3, #12
 8004834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	621a      	str	r2, [r3, #32]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	f043 0307 	orr.w	r3, r3, #7
 8004876:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	609a      	str	r2, [r3, #8]
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	021a      	lsls	r2, r3, #8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	609a      	str	r2, [r3, #8]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr

080048c6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b087      	sub	sp, #28
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f003 031f 	and.w	r3, r3, #31
 80048d8:	2201      	movs	r2, #1
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1a      	ldr	r2, [r3, #32]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	401a      	ands	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1a      	ldr	r2, [r3, #32]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	fa01 f303 	lsl.w	r3, r1, r3
 80048fe:	431a      	orrs	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]
}
 8004904:	bf00      	nop
 8004906:	371c      	adds	r7, #28
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr
	...

08004910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004924:	2302      	movs	r3, #2
 8004926:	e046      	b.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a16      	ldr	r2, [pc, #88]	@ (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004974:	d009      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a12      	ldr	r2, [pc, #72]	@ (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a10      	ldr	r2, [pc, #64]	@ (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d10c      	bne.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	4313      	orrs	r3, r2
 800499a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800

080049cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <memset>:
 80049f0:	4603      	mov	r3, r0
 80049f2:	4402      	add	r2, r0
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d100      	bne.n	80049fa <memset+0xa>
 80049f8:	4770      	bx	lr
 80049fa:	f803 1b01 	strb.w	r1, [r3], #1
 80049fe:	e7f9      	b.n	80049f4 <memset+0x4>

08004a00 <__libc_init_array>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	2600      	movs	r6, #0
 8004a04:	4d0c      	ldr	r5, [pc, #48]	@ (8004a38 <__libc_init_array+0x38>)
 8004a06:	4c0d      	ldr	r4, [pc, #52]	@ (8004a3c <__libc_init_array+0x3c>)
 8004a08:	1b64      	subs	r4, r4, r5
 8004a0a:	10a4      	asrs	r4, r4, #2
 8004a0c:	42a6      	cmp	r6, r4
 8004a0e:	d109      	bne.n	8004a24 <__libc_init_array+0x24>
 8004a10:	f000 f81a 	bl	8004a48 <_init>
 8004a14:	2600      	movs	r6, #0
 8004a16:	4d0a      	ldr	r5, [pc, #40]	@ (8004a40 <__libc_init_array+0x40>)
 8004a18:	4c0a      	ldr	r4, [pc, #40]	@ (8004a44 <__libc_init_array+0x44>)
 8004a1a:	1b64      	subs	r4, r4, r5
 8004a1c:	10a4      	asrs	r4, r4, #2
 8004a1e:	42a6      	cmp	r6, r4
 8004a20:	d105      	bne.n	8004a2e <__libc_init_array+0x2e>
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
 8004a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a28:	4798      	blx	r3
 8004a2a:	3601      	adds	r6, #1
 8004a2c:	e7ee      	b.n	8004a0c <__libc_init_array+0xc>
 8004a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a32:	4798      	blx	r3
 8004a34:	3601      	adds	r6, #1
 8004a36:	e7f2      	b.n	8004a1e <__libc_init_array+0x1e>
 8004a38:	08004a84 	.word	0x08004a84
 8004a3c:	08004a84 	.word	0x08004a84
 8004a40:	08004a84 	.word	0x08004a84
 8004a44:	08004a88 	.word	0x08004a88

08004a48 <_init>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	bf00      	nop
 8004a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4e:	bc08      	pop	{r3}
 8004a50:	469e      	mov	lr, r3
 8004a52:	4770      	bx	lr

08004a54 <_fini>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	bf00      	nop
 8004a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5a:	bc08      	pop	{r3}
 8004a5c:	469e      	mov	lr, r3
 8004a5e:	4770      	bx	lr
